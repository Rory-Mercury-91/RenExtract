# ui/dialogs/exclusions_manager_dialog.py
# Gestionnaire d'exclusions de lignes pour la coh√©rence

"""
Fen√™tre modale pour g√©rer les exclusions de lignes de coh√©rence.
Permet de voir, filtrer et supprimer les exclusions ajout√©es via le rapport HTML interactif.
"""

import tkinter as tk
from tkinter import ttk
import os

from ui.themes import theme_manager
from infrastructure.config.config import config_manager
from infrastructure.logging.logging import log_message
from infrastructure.helpers.unified_functions import show_custom_messagebox


class ExclusionsManagerDialog:
    """Fen√™tre modale de gestion des exclusions"""
    
    def __init__(self, parent):
        """
        Initialise la fen√™tre de gestion des exclusions
        
        Args:
            parent: Fen√™tre parent (tk.Tk ou tk.Toplevel)
        """
        self.parent = parent
        self.theme = theme_manager.get_theme()
        
        # Cr√©er la fen√™tre modale
        self.window = tk.Toplevel(parent)
        self.window.title("‚öôÔ∏è Gestion des Exclusions de Coh√©rence")
        self.window.geometry("1000x600")
        self.window.minsize(800, 500)
        self.window.configure(bg=self.theme["bg"])
        
        # Rendre la fen√™tre modale
        self.window.transient(parent)
        self.window.grab_set()
        
        # Centrer la fen√™tre
        self._center_window()
        
        # Variables
        self.current_project_filter = tk.StringVar(value="all")
        self.current_file_filter = tk.StringVar(value="all")  # Nouveau filtre par fichier
        self.exclusions_data = {}  # {project_path: [exclusions]}
        self.tree_items = {}  # {item_id: (project, index)}
        
        # Syst√®me de s√©lection multiple par checkbox
        self.selected_items = {}  # {item_id: True/False}
        self.select_all_var = tk.BooleanVar(value=False)
        
        # Cr√©er l'interface
        self._create_ui()
        
        # Charger les exclusions
        self._load_exclusions()
        
        # Gestion de la fermeture
        self.window.protocol("WM_DELETE_WINDOW", self._on_close)
        
        log_message("INFO", "Gestionnaire d'exclusions initialis√©", category="exclusions_manager")
    
    def _center_window(self):
        """Centre la fen√™tre sur l'√©cran"""
        self.window.update_idletasks()
        width = self.window.winfo_width()
        height = self.window.winfo_height()
        x = (self.window.winfo_screenwidth() // 2) - (width // 2)
        y = (self.window.winfo_screenheight() // 2) - (height // 2)
        self.window.geometry(f"+{x}+{y}")
    
    def _create_ui(self):
        """Cr√©e l'interface de la fen√™tre"""
        # === HEADER ===
        header_frame = tk.Frame(self.window, bg=self.theme["bg"])
        header_frame.pack(fill='x', padx=20, pady=15)
        
        tk.Label(
            header_frame,
            text="‚öôÔ∏è Gestion des Exclusions de Lignes",
            font=('Segoe UI', 14, 'bold'),
            bg=self.theme["bg"],
            fg=self.theme["accent"]
        ).pack()
        
        tk.Label(
            header_frame,
            text="G√©rez les lignes ignor√©es dans les rapports de coh√©rence",
            font=('Segoe UI', 9),
            bg=self.theme["bg"],
            fg=self.theme["fg"]
        ).pack(pady=(5, 0))
        
        # === FILTRES (2 COLONNES C√îTE √Ä C√îTE) ===
        filters_frame = tk.Frame(self.window, bg=self.theme["bg"])
        filters_frame.pack(fill='x', padx=20, pady=(0, 10))
        
        # Colonne gauche - Filtre par projet
        filter_project_column = tk.Frame(filters_frame, bg=self.theme["bg"])
        filter_project_column.pack(side='left', fill='x', expand=True, padx=(0, 15))
        
        tk.Label(
            filter_project_column,
            text="üéÆ Filtrer par projet :",
            font=('Segoe UI', 9, 'bold'),
            bg=self.theme["bg"],
            fg=self.theme["fg"]
        ).pack(anchor='w', pady=(0, 5))
        
        self.project_filter_combo = ttk.Combobox(
            filter_project_column,
            textvariable=self.current_project_filter,
            state='readonly',
            font=('Segoe UI', 9),
            width=30
        )
        self.project_filter_combo.pack(anchor='w', fill='x', pady=(0, 5))
        self.project_filter_combo.bind('<<ComboboxSelected>>', lambda e: self._on_project_filter_changed())
        
        # Colonne droite - Filtre par fichier
        filter_file_column = tk.Frame(filters_frame, bg=self.theme["bg"])
        filter_file_column.pack(side='right', fill='x', expand=True, padx=(15, 0))
        
        tk.Label(
            filter_file_column,
            text="üìÑ Filtrer par fichier :",
            font=('Segoe UI', 9, 'bold'),
            bg=self.theme["bg"],
            fg=self.theme["fg"]
        ).pack(anchor='w', pady=(0, 5))
        
        self.file_filter_combo = ttk.Combobox(
            filter_file_column,
            textvariable=self.current_file_filter,
            state='readonly',
            font=('Segoe UI', 9),
            width=30
        )
        self.file_filter_combo.pack(anchor='w', fill='x', pady=(0, 5))
        self.file_filter_combo.bind('<<ComboboxSelected>>', lambda e: self._apply_filter())
        
        # === LISTE DES EXCLUSIONS (TREEVIEW) ===
        tree_frame = tk.Frame(self.window, bg=self.theme["bg"])
        tree_frame.pack(fill='both', expand=True, padx=20, pady=(0, 10))
        
        # Scrollbars
        tree_scroll_y = tk.Scrollbar(tree_frame, orient='vertical')
        tree_scroll_y.pack(side='right', fill='y')
        
        tree_scroll_x = tk.Scrollbar(tree_frame, orient='horizontal')
        tree_scroll_x.pack(side='bottom', fill='x')
        
        # Treeview avec colonnes (ajout de 'select' pour checkbox)
        columns = ('select', 'project', 'file', 'line', 'text', 'date')
        self.tree = ttk.Treeview(
            tree_frame,
            columns=columns,
            show='headings',
            yscrollcommand=tree_scroll_y.set,
            xscrollcommand=tree_scroll_x.set,
            selectmode='extended'
        )
        
        tree_scroll_y.config(command=self.tree.yview)
        tree_scroll_x.config(command=self.tree.xview)
        
        # Configuration des colonnes avec en-t√™tes centr√©s
        headings_config = [
            ('select', "‚òê", 40),  # Colonne de s√©lection
            ('project', "Projet", 180),
            ('file', "Fichier", 200),
            ('line', "Ligne", 60),
            ('text', "Texte exclu", 300),
            ('date', "Date d'ajout", 140)
        ]
        
        for col_id, col_text, col_width in headings_config:
            if col_id == 'select':
                # En-t√™te cliquable pour tout s√©lectionner/d√©s√©lectionner
                self.tree.heading(col_id, 
                                text=col_text,
                                command=self._toggle_select_all,
                                anchor='center')
                self.tree.column(col_id, width=col_width, anchor='center', stretch=False)
            else:
                self.tree.heading(col_id, text=col_text, anchor='center')
                if col_id == 'line':
                    self.tree.column(col_id, width=col_width, minwidth=50, anchor='center', stretch=False)
                else:
                    self.tree.column(col_id, width=col_width, minwidth=100, anchor='w')
        
        self.tree.pack(fill='both', expand=True)
        
        # Bind pour cliquer sur une ligne et toggle la checkbox
        self.tree.bind('<Button-1>', self._on_tree_click)
        
        # === STATISTIQUES ===
        stats_frame = tk.Frame(self.window, bg=self.theme["bg"])
        stats_frame.pack(fill='x', padx=20, pady=(0, 10))
        
        self.stats_label = tk.Label(
            stats_frame,
            text="",
            font=('Segoe UI', 9, 'italic'),
            bg=self.theme["bg"],
            fg=self.theme["fg"]
        )
        self.stats_label.pack(side='left')
        
        # === BOUTONS D'ACTION ===
        buttons_frame = tk.Frame(self.window, bg=self.theme["bg"])
        buttons_frame.pack(fill='x', padx=20, pady=(0, 20))
        
        # Boutons √† gauche
        left_buttons = tk.Frame(buttons_frame, bg=self.theme["bg"])
        left_buttons.pack(side='left')
        
        tk.Button(
            left_buttons,
            text="üîÑ Actualiser",
            command=self._refresh,
            bg=self.theme["button_secondary_bg"],
            fg="#000000",
            font=('Segoe UI', 9),
            padx=12,
            pady=6,
            relief='flat',
            cursor='hand2'
        ).pack(side='left', padx=(0, 5))
        
        tk.Button(
            left_buttons,
            text="üóëÔ∏è Supprimer la s√©lection",
            command=self._delete_selected,
            bg=self.theme["button_danger_bg"],
            fg="#000000",
            font=('Segoe UI', 9),
            padx=12,
            pady=6,
            relief='flat',
            cursor='hand2'
        ).pack(side='left')
        
        # Bouton √† droite
        tk.Button(
            buttons_frame,
            text="‚úÖ Fermer",
            command=self._on_close,
            bg=self.theme["button_primary_bg"],
            fg="#000000",
            font=('Segoe UI', 9, 'bold'),
            padx=20,
            pady=6,
            relief='flat',
            cursor='hand2'
        ).pack(side='right')
    
    def _load_exclusions(self):
        """Charge toutes les exclusions depuis la config"""
        try:
            # R√©cup√©rer toutes les exclusions (dict par projet)
            self.exclusions_data = config_manager.get_coherence_exclusions()
            
            if not isinstance(self.exclusions_data, dict):
                self.exclusions_data = {}
                log_message("ATTENTION", "Exclusions mal format√©es, r√©initialisation", category="exclusions_manager")
            
            # Mettre √† jour le filtre de projets
            self._update_project_filter()
            
            # Afficher les exclusions
            self._display_exclusions()
            
            log_message("INFO", f"Exclusions charg√©es: {len(self.exclusions_data)} projet(s)", category="exclusions_manager")
            
        except Exception as e:
            log_message("ERREUR", f"Erreur chargement exclusions: {e}", category="exclusions_manager")
            show_custom_messagebox(
                'error',
                "‚ùå Erreur de chargement",
                f"Impossible de charger les exclusions:\n\n{e}",
                self.theme,
                parent=self.window
            )
    
    def _update_project_filter(self):
        """Met √† jour la liste des projets dans le filtre"""
        try:
            projects = list(self.exclusions_data.keys())
            
            # Ajouter "Tous les projets" en premier
            values = ["Tous les projets"] + [os.path.basename(p) for p in projects]
            
            self.project_filter_combo['values'] = values
            
            # S√©lectionner "Tous les projets" par d√©faut
            if self.current_project_filter.get() == "all" or not self.current_project_filter.get():
                self.project_filter_combo.current(0)
            
            # Mettre √† jour le filtre de fichiers
            self._update_file_filter()
            
        except Exception as e:
            log_message("ERREUR", f"Erreur mise √† jour filtre projets: {e}", category="exclusions_manager")
    
    def _update_file_filter(self):
        """Met √† jour la liste des fichiers dans le filtre selon le projet s√©lectionn√©"""
        try:
            selected_project = self.current_project_filter.get()
            
            # R√©cup√©rer les fichiers selon le projet s√©lectionn√©
            files = set()
            
            if selected_project == "Tous les projets":
                # Tous les fichiers de tous les projets
                for project_path, exclusions in self.exclusions_data.items():
                    for exclusion in exclusions:
                        files.add(exclusion.get('file', ''))
            else:
                # Fichiers du projet s√©lectionn√© uniquement
                for project_path, exclusions in self.exclusions_data.items():
                    if os.path.basename(project_path) == selected_project:
                        for exclusion in exclusions:
                            files.add(exclusion.get('file', ''))
                        break
            
            # Supprimer les fichiers vides
            files.discard('')
            
            # Cr√©er la liste avec "Tous les fichiers" en premier
            values = ["Tous les fichiers"] + sorted(list(files))
            
            self.file_filter_combo['values'] = values
            
            # R√©initialiser √† "Tous les fichiers" quand on change de projet
            if not hasattr(self, '_file_filter_initialized') or not self._file_filter_initialized:
                self.file_filter_combo.current(0)
                self._file_filter_initialized = True
            
        except Exception as e:
            log_message("ERREUR", f"Erreur mise √† jour filtre fichiers: {e}", category="exclusions_manager")
    
    def _on_project_filter_changed(self):
        """Callback quand le filtre de projet change"""
        try:
            # Mettre √† jour le filtre de fichiers selon le nouveau projet
            self._update_file_filter()
            
            # R√©initialiser le filtre de fichiers √† "Tous les fichiers"
            self.current_file_filter.set("all")
            self.file_filter_combo.current(0)
            
            # Appliquer les filtres
            self._apply_filter()
            
        except Exception as e:
            log_message("ERREUR", f"Erreur changement filtre projet: {e}", category="exclusions_manager")
    
    def _display_exclusions(self):
        """Affiche les exclusions dans le Treeview"""
        try:
            # Vider le Treeview
            for item in self.tree.get_children():
                self.tree.delete(item)
            
            self.tree_items.clear()
            
            # R√©initialiser les s√©lections
            self.selected_items = {}
            self.select_all_var.set(False)
            self.tree.heading('select', text="‚òê")
            
            # Filtrer selon le projet et le fichier s√©lectionn√©s
            selected_project_filter = self.current_project_filter.get()
            selected_file_filter = self.current_file_filter.get()
            
            total_exclusions = 0
            visible_exclusions = 0
            
            for project_path, exclusions in self.exclusions_data.items():
                project_name = os.path.basename(project_path)
                
                # V√©rifier le filtre par projet
                if selected_project_filter != "Tous les projets" and project_name != selected_project_filter:
                    continue
                
                for idx, exclusion in enumerate(exclusions):
                    total_exclusions += 1
                    
                    # Extraire les donn√©es
                    file_path = exclusion.get('file', 'N/A')
                    line = exclusion.get('line', 0)
                    text = exclusion.get('text', '')
                    date = exclusion.get('added_date', 'N/A')
                    
                    # V√©rifier le filtre par fichier
                    if selected_file_filter != "Tous les fichiers" and file_path != selected_file_filter:
                        continue
                    
                    visible_exclusions += 1
                    
                    # Tronquer le texte si trop long
                    if len(text) > 80:
                        text = text[:77] + "..."
                    
                    # Cr√©er un ID unique pour cette exclusion
                    item_unique_id = f"{project_path}|{file_path}|{line}"
                    
                    # Initialiser la s√©lection √† False
                    self.selected_items[item_unique_id] = False
                    
                    # Ajouter √† la Treeview avec checkbox
                    item_id = self.tree.insert(
                        '',
                        'end',
                        values=("‚òê", project_name, file_path, line, text, date),
                        tags=(item_unique_id,)
                    )
                    
                    # Stocker la r√©f√©rence
                    self.tree_items[item_id] = (project_path, idx)
            
            # Mettre √† jour les statistiques
            filter_info = []
            if selected_project_filter != "Tous les projets":
                filter_info.append(f"projet: {selected_project_filter}")
            if selected_file_filter != "Tous les fichiers":
                filter_info.append(f"fichier: {selected_file_filter}")
            
            if filter_info:
                stats_text = f"üìä {visible_exclusions} exclusion(s) ({', '.join(filter_info)})"
            elif selected_project_filter == "Tous les projets":
                stats_text = f"üìä Total: {visible_exclusions} exclusion(s) dans {len(self.exclusions_data)} projet(s)"
            else:
                stats_text = f"üìä {visible_exclusions} exclusion(s)"
            
            self.stats_label.config(text=stats_text)
            
            log_message("INFO", f"Affichage: {visible_exclusions} exclusions", category="exclusions_manager")
            
        except Exception as e:
            log_message("ERREUR", f"Erreur affichage exclusions: {e}", category="exclusions_manager")
            show_custom_messagebox(
                'error',
                "‚ùå Erreur d'affichage",
                f"Impossible d'afficher les exclusions:\n\n{e}",
                self.theme,
                parent=self.window
            )
    
    def _apply_filter(self):
        """Applique le filtre de projet"""
        self._display_exclusions()
    
    def _on_tree_click(self, event):
        """G√®re le clic sur le TreeView pour toggle les checkboxes"""
        try:
            # Identifier la r√©gion cliqu√©e
            region = self.tree.identify_region(event.x, event.y)
            if region != "cell":
                return
            
            # Identifier la ligne cliqu√©e
            item = self.tree.identify_row(event.y)
            if not item:
                return
            
            # R√©cup√©rer l'ID unique depuis les tags
            item_tags = self.tree.item(item, 'tags')
            item_unique_id = item_tags[0] if item_tags else None
            
            if not item_unique_id:
                return
            
            # Toggle la s√©lection
            current_state = self.selected_items.get(item_unique_id, False)
            new_state = not current_state
            self.selected_items[item_unique_id] = new_state
            
            # Mettre √† jour l'affichage
            current_values = list(self.tree.item(item, 'values'))
            current_values[0] = "‚òë" if new_state else "‚òê"
            self.tree.item(item, values=current_values)
            
            # Mettre √† jour le compteur de s√©lection
            self._update_selection_count()
            
        except Exception as e:
            log_message("ERREUR", f"Erreur toggle checkbox: {e}", category="exclusions_manager")
    
    def _toggle_select_all(self):
        """S√©lectionne ou d√©s√©lectionne tous les items"""
        try:
            # Inverser l'√©tat de s√©lection globale
            new_state = not self.select_all_var.get()
            self.select_all_var.set(new_state)
            
            # Mettre √† jour toutes les checkboxes
            for item in self.tree.get_children():
                item_tags = self.tree.item(item, 'tags')
                item_unique_id = item_tags[0] if item_tags else None
                
                if item_unique_id:
                    self.selected_items[item_unique_id] = new_state
                    
                    # Mettre √† jour l'affichage
                    current_values = list(self.tree.item(item, 'values'))
                    current_values[0] = "‚òë" if new_state else "‚òê"
                    self.tree.item(item, values=current_values)
            
            # Mettre √† jour le compteur
            self._update_selection_count()
            
        except Exception as e:
            log_message("ERREUR", f"Erreur toggle select all: {e}", category="exclusions_manager")
    
    def _update_selection_count(self):
        """Met √† jour l'affichage du nombre d'√©l√©ments s√©lectionn√©s"""
        try:
            selected_count = sum(1 for selected in self.selected_items.values() if selected)
            
            if selected_count > 0:
                self.stats_label.config(text=f"üìå {selected_count} exclusion(s) s√©lectionn√©e(s)")
            else:
                # Afficher les stats normales
                selected_project_filter = self.current_project_filter.get()
                selected_file_filter = self.current_file_filter.get()
                visible_exclusions = len([item for item in self.tree.get_children()])
                
                # Construire le texte des filtres actifs
                filter_info = []
                if selected_project_filter != "Tous les projets":
                    filter_info.append(f"projet: {selected_project_filter}")
                if selected_file_filter != "Tous les fichiers":
                    filter_info.append(f"fichier: {selected_file_filter}")
                
                if filter_info:
                    stats_text = f"üìä {visible_exclusions} exclusion(s) ({', '.join(filter_info)})"
                elif selected_project_filter == "Tous les projets":
                    stats_text = f"üìä Total: {visible_exclusions} exclusion(s) dans {len(self.exclusions_data)} projet(s)"
                else:
                    stats_text = f"üìä {visible_exclusions} exclusion(s)"
                
                self.stats_label.config(text=stats_text)
                
        except Exception as e:
            log_message("ERREUR", f"Erreur mise √† jour compteur s√©lection: {e}", category="exclusions_manager")
    
    def _refresh(self):
        """Recharge les exclusions"""
        self._load_exclusions()
        show_custom_messagebox(
            'info',
            "üîÑ Actualisation",
            "Les exclusions ont √©t√© actualis√©es avec succ√®s.",
            self.theme,
            parent=self.window
        )
    
    def _delete_selected(self):
        """Supprime les exclusions s√©lectionn√©es (via checkboxes)"""
        try:
            # R√©cup√©rer toutes les exclusions coch√©es
            selected_exclusions = []
            
            for item_unique_id, is_selected in self.selected_items.items():
                if is_selected:
                    # Parser l'ID unique pour extraire les infos
                    parts = item_unique_id.split('|')
                    if len(parts) == 3:
                        project_path, file_path, line = parts
                        selected_exclusions.append({
                            'project_path': project_path,
                            'file_path': file_path,
                            'line': int(line)
                        })
            
            if not selected_exclusions:
                show_custom_messagebox(
                    'warning',
                    "‚ö†Ô∏è Aucune s√©lection",
                    "Veuillez cocher au moins une exclusion √† supprimer.",
                    self.theme,
                    parent=self.window
                )
                return
            
            # Confirmer la suppression
            count = len(selected_exclusions)
            confirm = show_custom_messagebox(
                'askyesno',
                "‚ùì Confirmer la suppression",
                f"Voulez-vous vraiment supprimer {count} exclusion(s) ?\n\n"
                "Cette action est irr√©versible.",
                self.theme,
                yes_text="Oui, supprimer",
                no_text="Annuler",
                parent=self.window
            )
            
            if not confirm:
                return
            
            # Supprimer les exclusions
            deleted_count = 0
            errors = []
            
            for excl_info in selected_exclusions:
                try:
                    # Trouver l'exclusion compl√®te pour avoir le texte
                    project_path = excl_info['project_path']
                    file_path = excl_info['file_path']
                    line = excl_info['line']
                    
                    if project_path in self.exclusions_data:
                        for exclusion in self.exclusions_data[project_path]:
                            if (exclusion['file'] == file_path and 
                                exclusion['line'] == line):
                                # Supprimer via config_manager
                                config_manager.remove_coherence_exclusion(
                                    project_path,
                                    exclusion['file'],
                                    exclusion['line'],
                                    exclusion['text']
                                )
                                deleted_count += 1
                                break
                    
                except Exception as e:
                    errors.append(f"{file_path}:{line}: {e}")
                    log_message("ERREUR", f"Erreur suppression exclusion {file_path}:{line}: {e}", category="exclusions_manager")
            
            # Recharger les exclusions
            self._load_exclusions()
            
            # Afficher le r√©sultat
            if errors:
                show_custom_messagebox(
                    'warning',
                    "‚ö†Ô∏è Suppression partielle",
                    f"{deleted_count}/{count} exclusion(s) supprim√©e(s)\n\n"
                    f"{len(errors)} erreur(s) rencontr√©e(s).",
                    self.theme,
                    parent=self.window
                )
            else:
                show_custom_messagebox(
                    'info',
                    "‚úÖ Suppression r√©ussie",
                    f"{deleted_count} exclusion(s) supprim√©e(s) avec succ√®s.",
                    self.theme,
                    parent=self.window
                )
            
            log_message("INFO", f"{deleted_count} exclusions supprim√©es", category="exclusions_manager")
            
        except Exception as e:
            log_message("ERREUR", f"Erreur suppression exclusions: {e}", category="exclusions_manager")
            show_custom_messagebox(
                'error',
                "‚ùå Erreur de suppression",
                f"Impossible de supprimer les exclusions:\n\n{e}",
                self.theme,
                parent=self.window
            )
    
    def _on_close(self):
        """Ferme la fen√™tre"""
        try:
            self.window.grab_release()
            self.window.destroy()
            log_message("INFO", "Gestionnaire d'exclusions ferm√©", category="exclusions_manager")
        except Exception as e:
            log_message("ERREUR", f"Erreur fermeture gestionnaire: {e}", category="exclusions_manager")

