# ui/tab_tools/coherence_tab.py
# Onglet de v√©rification de coh√©rence - Outils de Maintenance Ren'Py

"""
Onglet de v√©rification de coh√©rence des traductions Ren'Py
- Interface de s√©lection langue/fichiers avec ProjectLanguageSelector
- Options de v√©rification personnalisables
- Exclusions de fichiers et lignes
- G√©n√©ration de rapports d√©taill√©s
- TOUTE la logique m√©tier incluse
"""

import os
import threading
import tkinter as tk
from tkinter import ttk
from typing import Dict, Any, Optional

from ui.themes import theme_manager
from infrastructure.config.config import config_manager
from infrastructure.logging.logging import log_message
from infrastructure.helpers.unified_functions import show_translated_messagebox

def create_coherence_tab(parent_notebook, main_interface):
    """Cr√©e l'onglet de v√©rification de coh√©rence"""
    theme = theme_manager.get_theme()
    
    # Frame principal de l'onglet
    tab_frame = tk.Frame(parent_notebook, bg=theme["bg"])
    parent_notebook.add(tab_frame, text="üß™ V√©rification Coh√©rence")
    
    # Header avec titre centr√© et bouton d'aide √† droite
    help_frame = tk.Frame(tab_frame, bg=theme["bg"])
    help_frame.pack(fill='x', padx=20, pady=(15, 10))
    
    # Titre descriptif centr√©
    desc_label = tk.Label(
        help_frame,
        text="V√©rification de coh√©rence des traductions avec d√©tection d'incoh√©rences",
        font=('Segoe UI', 10, 'bold'),
        justify='center',
        bg=theme["bg"],
        fg=theme["accent"]
    )
    desc_label.pack(fill='x', anchor='center')
    
    # Bouton d'aide align√© √† droite
    help_btn = tk.Button(
        help_frame,
        text="√Ä quoi √ßa sert ?",
        command=lambda: _show_coherence_help(main_interface),
        bg=theme["button_secondary_bg"],
        fg="#000000",
        font=('Segoe UI', 10, 'bold'),
        width=15,
        height=1,
        relief='flat',
        cursor='hand2'
    )
    help_btn.pack(anchor='e', pady=(10, 0))
    
    # Contenu principal
    _create_coherence_content(tab_frame, main_interface)

def _create_coherence_content(parent, main_interface):
    """Cr√©e le contenu de l'onglet coh√©rence"""
    theme = theme_manager.get_theme()
    
    # === 1. S√âLECTION DE PROJET ===
    # S√©lecteur harmonis√© (on verrouille la partie 'projet')
    from ui.shared.project_widgets import ProjectLanguageSelector

    # On instancie le widget SANS sa propre barre de s√©lection de projet
    main_interface.coherence_project_selector = ProjectLanguageSelector(
        parent,
        initial_project_path=main_interface.current_project_path,
        on_language_changed=lambda lang: _on_coherence_language_changed(main_interface, lang),
        on_files_changed=lambda info: _on_coherence_files_changed(main_interface, info),
        show_project_input=False
    )

    # Appliquer les exclusions initiales
    exclusions_str = main_interface.coherence_excluded_files_var.get()
    if exclusions_str:
        main_interface.coherence_project_selector.set_exclusions(exclusions_str)

    # S'assurer que le widget pointe bien sur le projet du header
    try:
        if main_interface.current_project_path:
            main_interface.coherence_project_selector._validate_and_set_project(main_interface.current_project_path)
    except Exception:
        pass
    
    # === 2. TYPES DE CONTR√îLES ===
    # Options d'analyse
    options_title = tk.Label(
        parent,
        text="üîß Types de v√©rifications √† effectuer :",
        font=('Segoe UI', 10, 'bold'),
        bg=theme["bg"],
        fg=theme["accent"]
    )
    options_title.pack(anchor='w', padx=20, pady=(20, 10))
    
    # Frame pour les options en grille 5x3
    options_container = tk.Frame(parent, bg=theme["bg"])
    options_container.pack(fill='x', padx=20, pady=(0, 10))
    
    # Configuration de la grille 5x3 (5 colonnes, 3 lignes)
    grid_columns = 5
    
    # Liste des options avec leurs variables et textes
    options_data = [
        (main_interface.check_variables_var, "Variables [] incoh√©rentes"),
        (main_interface.check_tags_var, "Balises {} incoh√©rentes"),
        (main_interface.check_untranslated_var, "Lignes non traduites"),
        (main_interface.check_ellipsis_var, "‚Ä¶ Ellipsis (-- ‚Üí ...)"),
        (main_interface.check_escape_sequences_var, "\\ S√©quences d'√©chappement (\\n, \\t, \\r, \\\\)"),
        (main_interface.check_percentages_var, "% Variables de formatage (%s, %d, %%)"),
        (main_interface.check_quotations_var, "\" Guillemets et √©chappements"),
        (main_interface.check_parentheses_var, "() Parenth√®ses et crochets"),
        (main_interface.check_syntax_var, "Syntaxe Ren'Py et structure"),
        (main_interface.check_deepl_ellipsis_var, "[‚Ä¶] Ellipses DeepL [...] ‚Üí ..."),
        (main_interface.check_isolated_percent_var, "% Pourcentages isol√©s (% ‚Üí %%)"),
        (main_interface.check_french_quotes_var, "¬´¬ª Guillemets fran√ßais ¬´¬ª ‚Üí \""),
        (main_interface.check_line_structure_var, "Structure des lignes old/new")
    ]
    
    # Cr√©er les cases √† cocher en grille
    for i, (var, text) in enumerate(options_data):
        row = i // grid_columns
        col = i % grid_columns
        
        checkbox = tk.Checkbutton(
            options_container,
            text=text,
            variable=var,
            font=('Segoe UI', 9),
            bg=theme["bg"],
            fg=theme["fg"],
            selectcolor=theme["bg"],
            activebackground=theme["bg"],
            activeforeground=theme["fg"],
            anchor='w'
        )
        checkbox.grid(row=row, column=col, sticky='w', padx=5, pady=2)
    
    # Configurer les colonnes pour qu'elles s'√©tendent
    for col in range(grid_columns):
        options_container.grid_columnconfigure(col, weight=1)
    
    # Boutons de contr√¥le des options
    buttons_controls_frame = tk.Frame(parent, bg=theme["bg"])
    buttons_controls_frame.pack(fill='x', padx=20, pady=(10, 20))
    
    # Frame horizontal pour les boutons
    all_buttons_frame = tk.Frame(buttons_controls_frame, bg=theme["bg"])
    all_buttons_frame.pack()
    
    select_all_btn = tk.Button(
        all_buttons_frame,
        text="‚úÖ Tout s√©lectionner",
        command=lambda: _select_all_coherence_options(main_interface),
        bg=theme["button_primary_bg"],
        fg="#000000",
        font=('Segoe UI', 9),
        pady=4,
        padx=8,
        relief='flat',
        cursor='hand2'
    )
    select_all_btn.pack(side='left', padx=(0, 10))
    
    select_none_btn = tk.Button(
        all_buttons_frame,
        text="‚ùå Tout d√©s√©lectionner", 
        command=lambda: _select_no_coherence_options(main_interface),
        bg=theme["button_danger_bg"],
        fg="#000000",
        font=('Segoe UI', 9),
        pady=4,
        padx=8,
        relief='flat',
        cursor='hand2'
    )
    select_none_btn.pack(side='left')
    
    # === 3. EXCLUSIONS DE FICHIERS ===
    exclusions_frame = tk.Frame(parent, bg=theme["bg"])
    exclusions_frame.pack(fill='x', padx=20, pady=(20, 10))
    
    # Header avec titre et bouton de gestion des exclusions de lignes
    exclusions_header = tk.Frame(exclusions_frame, bg=theme["bg"])
    exclusions_header.pack(fill='x', pady=(0, 5))
    
    tk.Label(
        exclusions_header,
        text="üö´ Fichiers √† exclure :",
        font=('Segoe UI', 10, 'bold'),
        bg=theme["bg"],
        fg=theme["accent"]
    ).pack(side='left')
    
    # Bouton pour g√©rer les exclusions de lignes (√† droite)
    manage_exclusions_btn = tk.Button(
        exclusions_header,
        text="‚öôÔ∏è G√©rer les exclusions de lignes",
        command=lambda: _open_exclusions_manager(main_interface),
        bg=theme["button_nav_bg"],
        fg="#000000",
        font=('Segoe UI', 9),
        pady=2,
        padx=8,
        relief='flat',
        cursor='hand2'
    )
    manage_exclusions_btn.pack(side='right')
    
    main_interface.coherence_excluded_files_entry = tk.Entry(
        exclusions_frame,
        textvariable=main_interface.coherence_excluded_files_var,
        font=('Segoe UI', 10),
        bg=theme["entry_bg"],
        fg=theme["entry_fg"],
        insertbackground=theme["entry_fg"],
        relief='solid',
        borderwidth=1
    )
    main_interface.coherence_excluded_files_entry.pack(fill='x', pady=(0, 5), ipady=4)
    
    tk.Label(
        exclusions_frame,
        text="üí° Ex: z_lang.rpy, common.rpy",
        font=('Segoe UI', 8, 'italic'),
        bg=theme["bg"],
        fg='#2980B9'
    ).pack(anchor='w')
    
    # === 4. BOUTONS D'ACTION ===
    # Container horizontal pour les boutons
    buttons_frame = tk.Frame(parent, bg=theme["bg"])
    buttons_frame.pack(fill='x', padx=20, pady=(30, 20))
    
    # Boutons √† droite
    buttons_right_frame = tk.Frame(buttons_frame, bg=theme["bg"])
    buttons_right_frame.pack(side='right')
    
    main_interface.coherence_detailed_report_btn = tk.Button(
        buttons_right_frame,
        text="üìÑ Rapport d√©taill√©",
        command=lambda: _open_coherence_detailed_report(main_interface),
        bg=theme["button_secondary_bg"],
        fg="#000000",
        font=('Segoe UI', 9),
        pady=4,
        padx=8,
        relief='flat',
        cursor='hand2'
    )
    main_interface.coherence_detailed_report_btn.pack(side='left', padx=(0, 5))
    
    main_interface.coherence_open_folder_btn = tk.Button(
        buttons_right_frame,
        text="üìÅ Ouvrir dossier",
        command=lambda: _open_coherence_analysis_folder(main_interface),
        bg=theme["button_nav_bg"],
        fg="#000000",
        font=('Segoe UI', 9),
        pady=4,
        padx=8,
        relief='flat',
        cursor='hand2'
    )
    main_interface.coherence_open_folder_btn.pack(side='left', padx=(0, 10))
    
    main_interface.coherence_analyze_btn = tk.Button(
        buttons_right_frame,
        text="üöÄ D√©marrer l'analyse",
        command=lambda: start_coherence_analysis(main_interface),
        bg=theme["button_primary_bg"],
        fg="#000000",
        font=('Segoe UI', 9, 'bold'),
        pady=6,
        padx=12
    )
    main_interface.coherence_analyze_btn.pack(side='left')
    
    # Note: Le bouton d'analyse de coh√©rence n'est PAS ajout√© √† operation_buttons
    # car c'est un outil ind√©pendant qui ne doit pas √™tre bloqu√© par les op√©rations principales
    # (extraction, reconstruction, g√©n√©ration TL, etc.)
    
    # Configurer la sauvegarde automatique des options avec d√©lai pour √©viter les notifications au d√©marrage
    _setup_auto_save_coherence_options(main_interface)

# ===== FONCTIONS DE CONTR√îLE DES OPTIONS =====

def _select_all_coherence_options(main_interface):
    """S√©lectionne toutes les options de v√©rification"""
    try:
        # Temporairement d√©sactiver les notifications pour √©viter le spam
        main_interface._coherence_initialization_complete = False
        
        # Liste de toutes les variables de v√©rification
        coherence_vars = [
            main_interface.check_variables_var,
            main_interface.check_tags_var,
            main_interface.check_untranslated_var,
            main_interface.check_ellipsis_var,
            main_interface.check_escape_sequences_var,
            main_interface.check_percentages_var,
            main_interface.check_quotations_var,
            main_interface.check_parentheses_var,
            main_interface.check_syntax_var,
            main_interface.check_deepl_ellipsis_var,
            main_interface.check_isolated_percent_var,
            main_interface.check_french_quotes_var,
            main_interface.check_line_structure_var
        ]
        
        # S√©lectionner toutes les options
        for var in coherence_vars:
            var.set(True)
        
        # R√©activer les notifications apr√®s un court d√©lai
        def re_enable_notifications():
            main_interface._coherence_initialization_complete = True
        
        main_interface.window.after(100, re_enable_notifications)
        
        # Notification globale
        _show_toast(main_interface, "‚úÖ Toutes les v√©rifications s√©lectionn√©es", "success")
        
        log_message("INFO", "Toutes les options de v√©rification s√©lectionn√©es", category="coherence_tab")
        
    except Exception as e:
        log_message("ERREUR", f"Erreur s√©lection toutes options: {e}", category="coherence_tab")

def _select_no_coherence_options(main_interface):
    """D√©s√©lectionne toutes les options de v√©rification"""
    try:
        # Temporairement d√©sactiver les notifications pour √©viter le spam
        main_interface._coherence_initialization_complete = False
        
        # Liste de toutes les variables de v√©rification
        coherence_vars = [
            main_interface.check_variables_var,
            main_interface.check_tags_var,
            main_interface.check_untranslated_var,
            main_interface.check_ellipsis_var,
            main_interface.check_escape_sequences_var,
            main_interface.check_percentages_var,
            main_interface.check_quotations_var,
            main_interface.check_parentheses_var,
            main_interface.check_syntax_var,
            main_interface.check_deepl_ellipsis_var,
            main_interface.check_isolated_percent_var,
            main_interface.check_french_quotes_var,
            main_interface.check_line_structure_var
        ]
        
        # D√©s√©lectionner toutes les options
        for var in coherence_vars:
            var.set(False)
        
        # R√©activer les notifications apr√®s un court d√©lai
        def re_enable_notifications():
            main_interface._coherence_initialization_complete = True
        
        main_interface.window.after(100, re_enable_notifications)
        
        # Notification globale
        _show_toast(main_interface, "‚ö†Ô∏è Toutes les v√©rifications d√©s√©lectionn√©es", "warning")
        
        log_message("INFO", "Toutes les options de v√©rification d√©s√©lectionn√©es", category="coherence_tab")
        
    except Exception as e:
        log_message("ERREUR", f"Erreur d√©s√©lection toutes options: {e}", category="coherence_tab")

# ===== FONCTIONS DE CALLBACKS =====

def _on_coherence_language_changed(main_interface, language_name):
    """Callback quand la langue coh√©rence change"""
    try:
        main_interface.coherence_language = language_name
        _update_coherence_status(main_interface, f"üåê Langue s√©lectionn√©e: {language_name}")
    except Exception as e:
        log_message("ERREUR", f"Erreur callback langue coh√©rence: {e}", category="coherence_tab")

def _on_coherence_files_changed(main_interface, selection_info):
    """Callback quand la s√©lection de fichiers coh√©rence change"""
    try:
        main_interface.coherence_selection_info = selection_info
        
        if selection_info['is_all_files']:
            file_count = len(selection_info['target_files'])
            _update_coherence_status(main_interface, f"Pr√™t √† analyser {file_count} fichiers de {selection_info['language']}")
        else:
            file_name = selection_info['selected_option']
            _update_coherence_status(main_interface, f"Pr√™t √† analyser le fichier {file_name}")
            
    except Exception as e:
        log_message("ERREUR", f"Erreur callback fichiers coh√©rence: {e}", category="coherence_tab")

# ===== FONCTIONS D'ANALYSE =====

def start_coherence_analysis(main_interface):
    """Lance l'analyse de coh√©rence"""
    try:
        # Validation de la s√©lection
        if not hasattr(main_interface, 'coherence_selection_info') or not main_interface.coherence_selection_info:
            _update_coherence_status(main_interface, "‚ùå Aucune s√©lection configur√©e")
            show_translated_messagebox(
                'warning',
                'Configuration incompl√®te',
                'Veuillez configurer un projet, une langue et une s√©lection de fichiers avant de lancer l\'analyse.',
                parent=main_interface.window
            )
            return
        
        selection = main_interface.coherence_selection_info
        
        # V√©rifications de validit√©
        if not selection['project_path'] or not os.path.exists(selection['project_path']):
            _update_coherence_status(main_interface, "‚ùå Projet invalide")
            return
        
        if not selection['language']:
            _update_coherence_status(main_interface, "‚ùå Aucune langue s√©lectionn√©e")
            return
        
        if not selection['file_paths']:
            _update_coherence_status(main_interface, "‚ùå Aucun fichier √† analyser")
            return
        
        # Pr√©parer les informations d'analyse
        if selection['is_all_files']:
            mode_text = f"dossier {selection['language']} ({len(selection['file_paths'])} fichiers)"
            analysis_target = os.path.join(selection['project_path'], "game", "tl", selection['language'])
        else:
            mode_text = f"fichier {selection['selected_option']}"
            analysis_target = selection['file_paths'][0]
        
        log_message("INFO", f"üöÄ D√©but de l'analyse de coh√©rence ({mode_text})", category="coherence_tab")
        
        # D√©sactiver le bouton et lancer l'analyse
        main_interface.coherence_analyze_btn.config(state='disabled', text="‚è≥ Analyse en cours...")
        run_coherence_analysis_thread(main_interface, analysis_target, selection)
        
    except Exception as e:
        log_message("ERREUR", f"Erreur lors du d√©marrage de l'analyse : {e}", category="coherence_tab")
        _update_coherence_status(main_interface, "‚ùå Erreur lors du d√©marrage")
        main_interface.coherence_analyze_btn.config(state='normal', text="üöÄ D√©marrer l'analyse")

def run_coherence_analysis_thread(main_interface, analysis_target, selection_info):
    """Ex√©cute l'analyse coh√©rence dans un thread"""
    def analysis_worker():
        try:
            # Import du v√©rificateur de coh√©rence unifi√©
            from core.services.tools.coherence_checker_business import check_coherence_unified, set_coherence_options
            
            # Configurer les options d'analyse
            analysis_options = _get_coherence_analysis_options(main_interface)
            set_coherence_options(analysis_options)
            
            # Lancer l'analyse
            results = check_coherence_unified(
                analysis_target, 
                return_details=True,
                selection_info=selection_info
            )
            
            # Stocker les r√©sultats
            main_interface.analysis_results = results
            if isinstance(results, dict):
                results['selection_info'] = selection_info
                main_interface.rapport_path = results.get('rapport_path')
            else:
                main_interface.rapport_path = results
                main_interface.analysis_results = {
                    'rapport_path': results,
                    'selection_info': selection_info
                }
            
            # Mettre √† jour l'interface
            main_interface.window.after(100, lambda: _display_coherence_results(main_interface))
            
        except Exception as e:
            log_message("ERREUR", f"Erreur pendant l'analyse : {e}", category="coherence_tab")
            error_message = str(e)
            main_interface.window.after(100, lambda: _coherence_analysis_error(main_interface, error_message))
    
    # Lancer le thread
    thread = threading.Thread(target=analysis_worker, daemon=True)
    thread.start()

def _display_coherence_results(main_interface):
    """Affiche les r√©sultats de coh√©rence"""
    try:
        if not main_interface.analysis_results:
            _coherence_analysis_error(main_interface, "Aucun r√©sultat d'analyse disponible")
            return
    
        # Calculer les statistiques
        if isinstance(main_interface.analysis_results, dict) and 'stats' in main_interface.analysis_results:
            stats = main_interface.analysis_results['stats']
            files_analyzed = stats.get('files_analyzed', 0)
            total_issues = stats.get('total_issues', 0)
            issues_by_type = stats.get('issues_by_type', {})
        else:
            files_analyzed = 0
            total_issues = 0
            issues_by_type = {}
    
        # Assurer des valeurs valides
        if not isinstance(files_analyzed, int):
            files_analyzed = 0
        if not isinstance(total_issues, int):
            total_issues = 0
    
        # Compter les types de probl√®mes distincts
        distinct_types = 0
        if isinstance(issues_by_type, dict):
            distinct_types = sum(1 for count in issues_by_type.values() if _get_issue_count(count) > 0)
        
        # Activer les boutons d'action
        main_interface.coherence_detailed_report_btn.config(state='normal')
        main_interface.coherence_open_folder_btn.config(state='normal')
    
        # Remettre le bouton d'analyse normal
        main_interface.coherence_analyze_btn.config(state='normal', text="üöÄ Nouvelle analyse")
    
        # Mettre √† jour l'√©tat avec un r√©sum√© compact
        if total_issues == 0:
            status_message = "‚úÖ Analyse termin√©e - Aucun probl√®me d√©tect√©"
        else:
            if distinct_types > 0:
                status_message = f"‚ö†Ô∏è Analyse termin√©e - {total_issues} erreur(s) sur {distinct_types} type(s)"
            else:
                status_message = f"‚ö†Ô∏è Analyse termin√©e - {total_issues} erreur(s) d√©tect√©e(s)"
        
        _update_coherence_status(main_interface, status_message)
    
        # Log du r√©sultat
        log_message("INFO", f"‚úÖ Analyse termin√©e - {files_analyzed} fichiers, {total_issues} probl√®mes, {distinct_types} types", category="coherence_tab")
    
    except Exception as e:
        error_msg = f"Erreur lors de l'affichage des r√©sultats: {str(e)}"
        log_message("ERREUR", f"Erreur affichage r√©sultats : {e}", category="coherence_tab")
        _coherence_analysis_error(main_interface, error_msg)

def _get_issue_count(issues_value):
    """Utilitaire pour obtenir le nombre de probl√®mes"""
    if isinstance(issues_value, int):
        return issues_value
    elif isinstance(issues_value, list):
        return len(issues_value)
    else:
        return 0

def _coherence_analysis_error(main_interface, error_message):
    """G√®re les erreurs d'analyse coh√©rence"""
    main_interface.coherence_analyze_btn.config(state='normal', text="üöÄ Lancer l'analyse")
    _update_coherence_status(main_interface, f"‚ùå Erreur: {error_message}")
    
    show_translated_messagebox(
        'error',
        '‚ùå Erreur d\'analyse',
        f'Une erreur est survenue pendant l\'analyse:\n\n{error_message}',
        parent=main_interface.window
    )

def _get_coherence_analysis_options(main_interface):
    """Retourne les options d'analyse actuelles pour l'analyseur"""
    return {
        'check_variables': main_interface.check_variables_var.get(),
        'check_tags': main_interface.check_tags_var.get(),
        'check_special_codes': main_interface.check_special_codes_var.get(),
        'check_untranslated': main_interface.check_untranslated_var.get(),
        'check_ellipsis': main_interface.check_ellipsis_var.get(),
        'check_escape_sequences': main_interface.check_escape_sequences_var.get(),
        'check_percentages': main_interface.check_percentages_var.get(),
        'check_quotations': main_interface.check_quotations_var.get(),
        'check_parentheses': main_interface.check_parentheses_var.get(),
        'check_syntax': main_interface.check_syntax_var.get(),
        'check_deepl_ellipsis': main_interface.check_deepl_ellipsis_var.get(),
        'check_isolated_percent': main_interface.check_isolated_percent_var.get(),
        'check_french_quotes': main_interface.check_french_quotes_var.get(),
        'check_line_structure': main_interface.check_line_structure_var.get(),
        'custom_exclusions': ['OK', 'Menu', 'Continue', 'Level']  # Valeurs par d√©faut
    }

# ===== FONCTIONS D'AIDE =====

def _show_coherence_help(main_interface):
    """Affiche l'aide pour l'outil de coh√©rence"""
    from infrastructure.helpers.unified_functions import show_custom_messagebox
    from ui.themes import theme_manager
    
    theme = theme_manager.get_theme()
    
    # Message avec couleurs et styles
    help_message = [
        ("üß™ ", "bold_green"),
        ("V√©rification de Coh√©rence des Traductions", "bold"),
        ("\n\n", "normal"),
        ("Cet outil d√©tecte les incoh√©rences entre les lignes OLD et NEW dans vos fichiers de traduction Ren'Py.", "normal"),
        ("\n\n", "normal"),
        ("üîß ", "bold_blue"),
        ("Types de V√©rifications Disponibles :", "bold"),
        ("\n", "normal"),
        ("‚Ä¢ ", "green"),
        ("Variables [] incoh√©rentes", "bold_green"),
        (" - D√©tection des variables manquantes ou mal format√©es", "normal"),
        ("\n", "normal"),
        ("‚Ä¢ ", "green"),
        ("Balises {} incoh√©rentes", "bold_green"),
        (" - V√©rification des balises de formatage", "normal"),
        ("\n", "normal"),
        ("‚Ä¢ ", "green"),
        ("Lignes non traduites", "bold_green"),
        (" - Identification des textes encore en anglais", "normal"),
        ("\n", "normal"),
        ("‚Ä¢ ", "green"),
        ("Ellipses (-- ‚Üí ...)", "bold_green"),
        (" - Conversion automatique des ellipses", "normal"),
        ("\n", "normal"),
        ("‚Ä¢ ", "green"),
        ("S√©quences d'√©chappement", "bold_green"),
        (" (\\n, \\t, \\r, \\\\) - Validation des caract√®res sp√©ciaux", "normal"),
        ("\n", "normal"),
        ("‚Ä¢ ", "green"),
        ("Variables de formatage", "bold_green"),
        (" (%s, %d, %%) - Coh√©rence des formats", "normal"),
        ("\n", "normal"),
        ("‚Ä¢ ", "green"),
        ("Guillemets et √©chappements", "bold_green"),
        (" - V√©rification des guillemets corrects", "normal"),
        ("\n", "normal"),
        ("‚Ä¢ ", "green"),
        ("Parenth√®ses et crochets", "bold_green"),
        (" - √âquilibrage des d√©limiteurs", "normal"),
        ("\n", "normal"),
        ("‚Ä¢ ", "green"),
        ("Syntaxe Ren'Py", "bold_green"),
        (" - Validation de la structure du code", "normal"),
        ("\n", "normal"),
        ("‚Ä¢ ", "green"),
        ("Ellipses DeepL", "bold_green"),
        (" ([‚Ä¶] ‚Üí ...) - Correction des ellipses de traduction", "normal"),
        ("\n", "normal"),
        ("‚Ä¢ ", "green"),
        ("Pourcentages isol√©s", "bold_green"),
        (" (% ‚Üí %%) - √âchappement des pourcentages", "normal"),
        ("\n", "normal"),
        ("‚Ä¢ ", "green"),
        ("Guillemets fran√ßais", "bold_green"),
        (" (¬´¬ª ‚Üí \") - Conversion vers guillemets standards", "normal"),
        ("\n", "normal"),
        ("‚Ä¢ ", "green"),
        ("Structure des lignes", "bold_green"),
        (" - Coh√©rence old/new", "normal"),
        ("\n\n", "normal"),
        ("üéØ ", "bold"),
        ("Guide d'utilisation :", "bold"),
        ("\n", "normal"),
        ("1. ", "bold"),
        ("S√©lectionnez la langue et les fichiers", "bold"),
        ("\n", "normal"),
        ("2. ", "bold"),
        ("Choisissez les types de v√©rifications", "bold"),
        (" (utilisez les boutons \"Tout s√©lectionner\" / \"Tout d√©s√©lectionner\")", "normal"),
        ("\n", "normal"),
        ("3. ", "bold"),
        ("Configurez les exclusions de fichiers", "bold"),
        (" si n√©cessaire", "normal"),
        ("\n", "normal"),
        ("4. ", "bold"),
        ("Cliquez sur \"D√©marrer l'analyse\"", "bold"),
        ("\n\n", "normal"),
        ("üìä ", "bold_blue"),
        ("R√©sultats et Rapports :", "bold"),
        ("\n", "normal"),
        ("‚Ä¢ ", "blue"),
        ("Rapport d√©taill√©", "bold_blue"),
        (" g√©n√©r√© automatiquement", "normal"),
        ("\n", "normal"),
        ("‚Ä¢ ", "blue"),
        ("Statistiques par type d'erreur", "bold_blue"),
        (" avec compteurs", "normal"),
        ("\n", "normal"),
        ("‚Ä¢ ", "blue"),
        ("Localisation pr√©cise", "bold_blue"),
        (" des probl√®mes (fichier + ligne)", "normal"),
        ("\n", "normal"),
        ("‚Ä¢ ", "blue"),
        ("Ouverture automatique", "bold_blue"),
        (" du dossier de r√©sultats", "normal"),
        ("\n\n", "normal"),
        ("üí° ", "bold_yellow"),
        ("Conseils d'utilisation :", "bold"),
        ("\n", "normal"),
        ("‚Ä¢ ", "yellow"),
        ("Commencez par s√©lectionner", "bold_yellow"),
        (" toutes les v√©rifications", "normal"),
        ("\n", "normal"),
        ("‚Ä¢ ", "yellow"),
        ("Excluez les fichiers", "bold_yellow"),
        (" modifi√©s manuellement", "normal"),
        ("\n", "normal"),
        ("‚Ä¢ ", "yellow"),
        ("V√©rifiez les r√©sultats", "bold_yellow"),
        (" avant de corriger automatiquement", "normal")
    ]
    
    show_custom_messagebox(
        'info',
        'üß™ Aide - V√©rification de Coh√©rence',
        help_message,
        theme,
        parent=main_interface.window
    )

# ===== FONCTIONS D'ACC√àS AUX RAPPORTS =====

def _open_coherence_detailed_report(main_interface):
    """Ouvre le rapport d√©taill√© de coh√©rence"""
    try:
        if not main_interface.rapport_path or not os.path.exists(main_interface.rapport_path):
            show_translated_messagebox(
                'warning',
                'Rapport non disponible',
                'Le rapport d√©taill√© n\'est pas disponible ou a √©t√© supprim√©.',
                parent=main_interface.window
            )
            return
        
        # Ouvrir le fichier avec l'application par d√©faut
        from core.models.files.file_manager import FileOpener
        FileOpener.open_files([main_interface.rapport_path], True)
        
        log_message("INFO", f"Rapport d√©taill√© ouvert : {main_interface.rapport_path}", category="coherence_tab")
        
    except Exception as e:
        log_message("ERREUR", f"Erreur ouverture rapport : {e}", category="coherence_tab")
        show_translated_messagebox(
            'error',
            'Erreur',
            f'Impossible d\'ouvrir le rapport d√©taill√©:\n\n{e}',
            parent=main_interface.window
        )

def _open_coherence_analysis_folder(main_interface):
    """Ouvre le dossier contenant les rapports de coh√©rence"""
    try:
        if not main_interface.rapport_path:
            from infrastructure.config.constants import FOLDERS
            folder_path = FOLDERS.get("warnings", "")
        else:
            folder_path = os.path.dirname(main_interface.rapport_path)
        
        if not os.path.exists(folder_path):
            show_translated_messagebox(
                'warning',
                'Dossier non trouv√©',
                'Le dossier des rapports n\'existe pas encore.',
                parent=main_interface.window
            )
            return
        
        # Ouvrir le dossier
        import subprocess
        import platform
        
        if platform.system() == "Windows":
            os.startfile(folder_path)
        elif platform.system() == "Darwin":  # macOS
            subprocess.run(["open", folder_path])
        else:  # Linux
            subprocess.run(["xdg-open", folder_path])
        
        log_message("INFO", f"Dossier des rapports ouvert : {folder_path}", category="coherence_tab")
        
    except Exception as e:
        log_message("ERREUR", f"Erreur ouverture dossier : {e}", category="coherence_tab")
        show_translated_messagebox(
            'error',
            'Erreur',
            f'Impossible d\'ouvrir le dossier:\n\n{e}',
            parent=main_interface.window
        )

def _update_coherence_status(main_interface, message):
    """Met √† jour le statut coh√©rence"""
    try:
        # Utiliser la m√©thode de mise √† jour de statut de l'interface principale
        if hasattr(main_interface, '_update_status'):
            main_interface._update_status(message)
        else:
            log_message("INFO", message, category="coherence_tab")
            
    except Exception as e:
        log_message("ERREUR", f"Erreur update_coherence_status: {e}", category="coherence_tab")

# ===== FONCTIONS DE SAUVEGARDE AUTOMATIQUE =====

def _save_coherence_options(main_interface):
    """Sauvegarde les options de coh√©rence"""
    try:
        # Sauvegarder les options d'analyse
        config_manager.set('coherence_check_variables', main_interface.check_variables_var.get())
        config_manager.set('coherence_check_tags', main_interface.check_tags_var.get())
        config_manager.set('coherence_check_special_codes', main_interface.check_special_codes_var.get())
        config_manager.set('coherence_check_untranslated', main_interface.check_untranslated_var.get())
        config_manager.set('coherence_check_ellipsis', main_interface.check_ellipsis_var.get())
        config_manager.set('coherence_check_escape_sequences', main_interface.check_escape_sequences_var.get())
        config_manager.set('coherence_check_percentages', main_interface.check_percentages_var.get())
        config_manager.set('coherence_check_quotations', main_interface.check_quotations_var.get())
        config_manager.set('coherence_check_parentheses', main_interface.check_parentheses_var.get())
        config_manager.set('coherence_check_syntax', main_interface.check_syntax_var.get())
        config_manager.set('coherence_check_deepl_ellipsis', main_interface.check_deepl_ellipsis_var.get())
        config_manager.set('coherence_check_isolated_percent', main_interface.check_isolated_percent_var.get())
        config_manager.set('coherence_check_french_quotes', main_interface.check_french_quotes_var.get())
        config_manager.set('coherence_check_line_structure', main_interface.check_line_structure_var.get())
        
        # Sauvegarder les exclusions de fichiers
        config_manager.set('coherence_excluded_files', main_interface.coherence_excluded_files_var.get())
        
        # Appliquer les exclusions au s√©lecteur de projet
        if hasattr(main_interface, 'coherence_project_selector') and main_interface.coherence_project_selector:
            exclusions_str = main_interface.coherence_excluded_files_var.get()
            main_interface.coherence_project_selector.set_exclusions(exclusions_str)
        
        # üÜï NE PLUS sauvegarder coherence_custom_exclusions depuis cette interface
        # Les exclusions sont maintenant g√©r√©es exclusivement via le rapport HTML interactif
        # (structure dictionnaire par projet/fichier/ligne, pas une simple liste de textes)
        
        # Compter les options activ√©es
        enabled_count = sum([
            main_interface.check_variables_var.get(),
            main_interface.check_tags_var.get(), 
            main_interface.check_special_codes_var.get(),
            main_interface.check_untranslated_var.get(),
            main_interface.check_ellipsis_var.get(),
            main_interface.check_escape_sequences_var.get(),
            main_interface.check_percentages_var.get(),
            main_interface.check_quotations_var.get(),
            main_interface.check_parentheses_var.get(),
            main_interface.check_syntax_var.get(),
            main_interface.check_deepl_ellipsis_var.get(),
            main_interface.check_isolated_percent_var.get(),
            main_interface.check_french_quotes_var.get(),
            main_interface.check_line_structure_var.get()
        ])
        
        _update_coherence_status(main_interface, f"üíæ Options sauvegard√©es - {enabled_count} v√©rifications, {len(exclusions_list)} exclusions")
        
        log_message("INFO", f"Options coh√©rence sauvegard√©es - {enabled_count} v√©rifications, exclusions: {exclusions_list}", category="coherence_tab")
        
    except Exception as e:
        log_message("ERREUR", f"Erreur sauvegarde options coh√©rence: {e}", category="coherence_tab")
        _update_coherence_status(main_interface, "‚ùå Erreur lors de la sauvegarde des options")

def _setup_auto_save_coherence_options(main_interface):
    """Configure la sauvegarde automatique des options de coh√©rence"""
    # Marquer imm√©diatement que l'initialisation est en cours
    main_interface._coherence_initialization_complete = False
    
    # Variables de coh√©rence avec leurs cl√©s de configuration
    coherence_vars = [
        (main_interface.check_variables_var, 'coherence_check_variables'),
        (main_interface.check_tags_var, 'coherence_check_tags'),
        (main_interface.check_special_codes_var, 'coherence_check_special_codes'),
        (main_interface.check_untranslated_var, 'coherence_check_untranslated'),
        (main_interface.check_ellipsis_var, 'coherence_check_ellipsis'),
        (main_interface.check_escape_sequences_var, 'coherence_check_escape_sequences'),
        (main_interface.check_percentages_var, 'coherence_check_percentages'),
        (main_interface.check_quotations_var, 'coherence_check_quotations'),
        (main_interface.check_parentheses_var, 'coherence_check_parentheses'),
        (main_interface.check_syntax_var, 'coherence_check_syntax'),
        (main_interface.check_deepl_ellipsis_var, 'coherence_check_deepl_ellipsis'),
        (main_interface.check_isolated_percent_var, 'coherence_check_isolated_percent'),
        (main_interface.check_french_quotes_var, 'coherence_check_french_quotes'),
        (main_interface.check_line_structure_var, 'coherence_check_line_structure')
    ]
    
    # Configurer la sauvegarde automatique pour chaque variable
    for var, config_key in coherence_vars:
        var.trace('w', lambda *args, key=config_key, v=var: _auto_save_coherence_option(main_interface, key, v.get()))
    
    # Configurer la sauvegarde automatique pour les exclusions de fichiers
    if hasattr(main_interface, 'coherence_excluded_files_var'):
        main_interface.coherence_excluded_files_var.trace('w', lambda *args: _auto_save_file_exclusions(main_interface))
    
    # D√©lai pour permettre l'initialisation compl√®te avant d'activer les notifications
    def enable_notifications():
        main_interface._coherence_initialization_complete = True
    
    # Programmer l'activation des notifications apr√®s un court d√©lai
    main_interface.window.after(1000, enable_notifications)  # 1 seconde de d√©lai

def _auto_save_coherence_option(main_interface, config_key, value):
    """Sauvegarde automatique d'une option de coh√©rence"""
    try:
        # Sauvegarder dans la config
        config_manager.set(config_key, value)
        
        # V√©rifier si c'est une vraie modification utilisateur (pas un chargement initial)
        if not hasattr(main_interface, '_coherence_initialization_complete') or not main_interface._coherence_initialization_complete:
            return
        
        # Afficher une notification toast sp√©cifique selon l'√©tat avec traduction fran√ßaise
        option_translations = {
            'coherence_check_variables': 'Variables [] incoh√©rentes',
            'coherence_check_tags': 'Balises {} incoh√©rentes',
            'coherence_check_special_codes': 'Codes sp√©ciaux',
            'coherence_check_untranslated': 'Lignes non traduites',
            'coherence_check_ellipsis': 'Ellipses (-- ‚Üí ...)',
            'coherence_check_escape_sequences': 'S√©quences d\'√©chappement',
            'coherence_check_percentages': 'Variables de formatage',
            'coherence_check_quotations': 'Guillemets et √©chappements',
            'coherence_check_parentheses': 'Parenth√®ses et crochets',
            'coherence_check_syntax': 'Syntaxe Ren\'Py',
            'coherence_check_deepl_ellipsis': 'Ellipses DeepL',
            'coherence_check_isolated_percent': 'Pourcentages isol√©s',
            'coherence_check_french_quotes': 'Guillemets fran√ßais',
            'coherence_check_line_structure': 'Structure des lignes'
        }
        
        option_name = option_translations.get(config_key, config_key.replace('coherence_check_', '').replace('_', ' ').title())
        if value:
            _show_toast(main_interface, f"‚úÖ {option_name} activ√©", "success")
        else:
            _show_toast(main_interface, f"‚ö†Ô∏è {option_name} d√©sactiv√©", "warning")
            
    except Exception as e:
        log_message("ERREUR", f"Erreur sauvegarde automatique {config_key}: {e}", category="coherence_tab")

def _auto_save_file_exclusions(main_interface):
    """Sauvegarde automatique des exclusions de fichiers"""
    try:
        # Sauvegarder les exclusions de fichiers
        if hasattr(main_interface, 'coherence_excluded_files_var'):
            config_manager.set('coherence_excluded_files', main_interface.coherence_excluded_files_var.get())
            
            # Appliquer les exclusions au s√©lecteur de projet
            if hasattr(main_interface, 'coherence_project_selector') and main_interface.coherence_project_selector:
                exclusions_str = main_interface.coherence_excluded_files_var.get()
                main_interface.coherence_project_selector.set_exclusions(exclusions_str)
        
        # V√©rifier si c'est une vraie modification utilisateur
        if not hasattr(main_interface, '_coherence_initialization_complete') or not main_interface._coherence_initialization_complete:
            return
        
        # Notification toast pour les exclusions
        _show_toast(main_interface, "üìù Exclusions de fichiers mises √† jour", "info")
    except Exception as e:
        log_message("ERREUR", f"Erreur sauvegarde automatique exclusions: {e}", category="coherence_tab")

def _show_toast(main_interface, message, toast_type="info"):
    """Affiche une notification toast"""
    try:
        # V√©rifier si le contr√¥leur et la fen√™tre principale existent
        if (hasattr(main_interface, 'parent_window') and main_interface.parent_window and
            hasattr(main_interface.parent_window, 'app_controller')):
            
            app_controller = main_interface.parent_window.app_controller
            if hasattr(app_controller, 'main_window'):
                main_window = app_controller.main_window
                
                # Acc√©der au gestionnaire de notifications via la m√©thode publique
                notifications = main_window.get_component('notifications')
                
                if notifications:
                    # Logique pour nettoyer les toasts pr√©c√©dents lors du changement de th√®me
                    if "Th√®me chang√©" in message or "Mode sombre" in message or "Mode clair" in message:
                        notifications.clear_all_toasts()

                # Mapper notre 'toast_type' simple aux kwargs attendus par show_notification
                kwargs = {'toast_type': 'info'} # Par d√©faut
                if toast_type == 'success' or 'activ√©' in message or '‚úÖ' in message:
                    kwargs['toast_type'] = 'success'
                elif toast_type == 'warning' or 'd√©sactiv√©' in message:
                    kwargs['toast_type'] = 'warning'
                elif toast_type == 'error' or '‚ùå' in message:
                    kwargs['toast_type'] = 'error'

                # Utiliser la m√©thode publique de la fen√™tre principale pour afficher la notification
                return main_window.show_notification(message, 'TOAST', **kwargs)
        
        # Fallback si la fen√™tre n'est pas accessible
        log_message("INFO", f"Toast Maintenance (Fallback): {message}", category="coherence_tab")
        return True
            
    except Exception as e:
        log_message("ERREUR", f"Erreur _show_toast: {e}", category="coherence_tab")
        return False

# ===== GESTIONNAIRE D'EXCLUSIONS DE LIGNES =====

def _open_exclusions_manager(main_interface):
    """Ouvre la fen√™tre de gestion des exclusions de lignes"""
    try:
        from ui.dialogs.exclusions_manager_dialog import ExclusionsManagerDialog
        
        # Cr√©er et afficher la fen√™tre
        dialog = ExclusionsManagerDialog(main_interface.window)
        
        log_message("INFO", "Fen√™tre de gestion des exclusions ouverte", category="coherence_tab")
        
    except Exception as e:
        log_message("ERREUR", f"Erreur ouverture gestionnaire exclusions: {e}", category="coherence_tab")
        show_translated_messagebox(
            'error',
            'Erreur',
            f'Impossible d\'ouvrir le gestionnaire d\'exclusions:\n\n{e}',
            parent=main_interface.window
        )