"""
Package "tutorial" - Syst√®me de guide HTML pour RenExtract
Structure modulaire optimis√©e en fran√ßais uniquement
Version 2.0.0 avec syst√®me de sant√© automatique
"""

import os
import sys
import datetime
import webbrowser
from pathlib import Path
from typing import Optional, Dict, List, Any, Tuple
from infrastructure.config.constants import VERSION, ensure_folders_exist, FILE_NAMES, FOLDERS
from infrastructure.logging.logging import log_message, get_logger
from infrastructure.helpers.unified_functions import show_custom_messagebox
from ui.themes import theme_manager

# Import du syst√®me de logging
try:
    LOGGING_AVAILABLE = True
except ImportError:
    LOGGING_AVAILABLE = False
    def log_message(level, message, category="init_tutorial"):
        pass  # Fallback silencieux

def discover_module_exports(module_name: str) -> Dict[str, Any]:
    # D√©couverte automatique des exports publics
    try:
        module = __import__(module_name, fromlist=[''])
        exported_symbols = {}
        
        # 1. Chercher __all__ en priorit√©
        if hasattr(module, '__all__'):
            for name in module.__all__:
                if hasattr(module, name):
                    exported_symbols[name] = getattr(module, name)
        else:
            # 2. D√©couverte automatique des symboles publics (sans underscore)
            for name in dir(module):
                if not name.startswith('_'):  # Exclure les priv√©s
                    obj = getattr(module, name)
                    # Inclure seulement les classes, fonctions et constantes
                    if (callable(obj) or 
                        isinstance(obj, type) or 
                        (isinstance(obj, (str, int, float, bool, list, dict, tuple)) and name.isupper())):
                        exported_symbols[name] = obj
        
        return exported_symbols
        
    except Exception as e:
        log_message("DEBUG", f"Erreur d√©couverte exports pour {module_name}: {str(e)}", "init_tutorial")
        return {}

def discover_module_exports_with_retries(module_name: str, max_retries: int = 3) -> Dict[str, Any]:
    # Retry pour d√©pendances circulaires
    for attempt in range(max_retries + 1):
        try:
            return discover_module_exports(module_name)
        except ImportError as e:
            if "circular import" in str(e).lower() or "partially initialized" in str(e):
                if attempt < max_retries:
                    log_message("DEBUG", f"Tentative {attempt + 1}/{max_retries + 1} - d√©pendance circulaire: {module_name}", "init_tutorial")
                    import time
                    time.sleep(0.1)
                    continue
                else:
                    log_message("ATTENTION", f"D√©pendance circulaire persistante: {module_name}", "init_tutorial")
                    return {}
            else:
                log_message("ERREUR", f"Import impossible: {module_name} - {str(e)}", "init_tutorial")
                return {}
        except Exception as e:
            log_message("ERREUR", f"Erreur d√©couverte: {module_name} - {str(e)}", "init_tutorial")
            return {}
    
    return {}

def discover_modules_in_directory() -> List[str]:
    # Scan automatique du dossier pour trouver les modules
    import os
    import glob
    
    try:
        tutorial_dir = os.path.dirname(__file__)
        python_files = glob.glob(os.path.join(tutorial_dir, "*.py"))
        
        modules_list = []
        excluded_files = {'__init__', '__pycache__', 'test_', 'temp_', 'backup_'}
        
        for file_path in python_files:
            module_name = os.path.basename(file_path)[:-3]  # Enlever .py
            
            # Filtrer les fichiers √† exclure
            should_exclude = any(module_name.startswith(exclude) for exclude in excluded_files)
            
            if not should_exclude and module_name not in modules_list:
                modules_list.append(module_name)
        
        # Chercher aussi dans les sous-dossiers
        subdirs = [d for d in os.listdir(tutorial_dir) if os.path.isdir(os.path.join(tutorial_dir, d)) and not d.startswith('__')]
        for subdir in subdirs:
            if subdir not in ['translations', 'content']:  # Exclusions sp√©ciales
                modules_list.append(subdir)
        
        # Trier pour un ordre coh√©rent
        modules_list.sort()
        
        return modules_list
        
    except Exception as e:
        log_message("ERREUR", f"Impossible de scanner le dossier: {str(e)}", "init_tutorial")
        # Fallback avec la liste connue
        return ['generator', 'cache', 'utils']

def load_tutorial_modules() -> Dict[str, Dict[str, Any]]:
    # Chargement automatique de tous les modules d√©couverts
    modules_list = discover_modules_in_directory()
    
    loaded_modules = {}
    failed_modules = []
    
    
    # S√©parer les modules potentiellement probl√©matiques
    problematic_modules = set()  # Aucun module probl√©matique connu pour tutorial
    safe_modules = [m for m in modules_list if m not in problematic_modules]
    risky_modules = [m for m in modules_list if m in problematic_modules]
    
    # √âtape 1: Charger les modules "s√ªrs" d'abord
    for module_name in safe_modules:
        try:
            symbols = discover_module_exports(f'ui.tutorial.{module_name}')
            
            if symbols:
                loaded_modules[module_name] = symbols
            else:
                failed_modules.append(module_name)
                log_message("ATTENTION", f"‚ùå {module_name}: aucun symbole public trouv√©", "init_tutorial")
                
        except Exception as e:
            failed_modules.append(module_name)
            log_message("ERREUR", f"‚ùå {module_name}: {str(e)}", "init_tutorial")
    
    # √âtape 2: Charger les modules "risqu√©s" avec retry
    for module_name in risky_modules:
        try:
            symbols = discover_module_exports_with_retries(f'ui.tutorial.{module_name}', max_retries=3)
            
            if symbols:
                loaded_modules[module_name] = symbols
            else:
                failed_modules.append(module_name)
                log_message("ATTENTION", f"‚ùå {module_name}: aucun symbole trouv√© apr√®s retry", "init_tutorial")
                
        except Exception as e:
            failed_modules.append(module_name)
            log_message("ERREUR", f"‚ùå {module_name}: {str(e)}", "init_tutorial")
    
    return loaded_modules, failed_modules, modules_list

def calculate_health_status(loaded_modules: Dict, failed_modules: List, modules_list: List) -> Dict[str, Any]:
    # Calcul du statut de sant√© du package
    total_modules = len(modules_list)
    loaded_count = len(loaded_modules)
    failed_count = len(failed_modules)
    health_percentage = (loaded_count / total_modules) * 100 if total_modules > 0 else 0
    
    total_symbols = sum(len(symbols) for symbols in loaded_modules.values())
    
    status = {
        'health_percentage': health_percentage,
        'loaded_modules': loaded_count,
        'failed_modules': failed_count,
        'total_modules': total_modules,
        'total_symbols': total_symbols,
        'failed_module_names': failed_modules,
        'can_operate': health_percentage >= 50,
        'is_healthy': health_percentage >= 80
    }
    
    return status

def manage_debug_mode(health_status: Dict[str, Any]) -> None:
    # Gestion automatique du mode debug selon la sant√©
    if not LOGGING_AVAILABLE:
        return
    
    try:
        logger = get_logger()
        
        if health_status['health_percentage'] < 80:
            # Sant√© faible - activer le debug
            if hasattr(logger, 'enable_debug_mode'):
                # V√©rifier la signature de la m√©thode
                import inspect
                sig = inspect.signature(logger.enable_debug_mode)
                if len(sig.parameters) > 0:
                    logger.enable_debug_mode(['init_tutorial', 'tutorial'])
                else:
                    logger.enable_debug_mode()
                log_message("INFO", "üîß Mode debug activ√© automatiquement (sant√© < 80%)", "init_tutorial")
        elif health_status['health_percentage'] >= 95:
            # Excellente sant√© - d√©sactiver le debug si activ√© automatiquement
            if hasattr(logger, 'disable_debug_mode'):
                # V√©rifier la signature de la m√©thode
                import inspect
                sig = inspect.signature(logger.disable_debug_mode)
                if len(sig.parameters) > 0:
                    logger.disable_debug_mode(['init_tutorial'])
                else:
                    logger.disable_debug_mode()
                
    except Exception as e:
        log_message("ATTENTION", f"Impossible de g√©rer le mode debug: {str(e)}", "init_tutorial")

def export_symbols_to_globals(loaded_modules: Dict[str, Dict[str, Any]], current_globals: Dict) -> None:
    # Export des symboles vers l'espace de noms global
    exported_count = 0
    
    for module_name, symbols in loaded_modules.items():
        for symbol_name, symbol_obj in symbols.items():
            current_globals[symbol_name] = symbol_obj
            exported_count += 1
    

# =============================================================================
# FALLBACKS POUR FONCTIONNALIT√âS CRITIQUES (CONSERV√âS)
# =============================================================================

def _fallback_show_tutorial(parent=None, language='fr'):
    # Version fallback pour show_tutorial
    try:
        log_message("ATTENTION", "Utilisation du fallback pour show_tutorial", "init_tutorial")
        theme = theme_manager.get_theme()
        show_custom_messagebox(
            'error',
            'Tutoriel indisponible',
            "Le syst√®me de tutoriel HTML n'est pas disponible.\n\n"
            "Le module principal de g√©n√©ration semble manquant ou d√©faillant.\n\n"
            "Consultez les logs pour plus de d√©tails.",
            theme,
            parent=parent
        )
    except Exception as e:
        log_message("ERREUR", f"Erreur dans fallback show_tutorial: {e}", "init_tutorial")

def _fallback_generator():
    # G√©n√©rateur fallback minimal
    class FallbackGenerator:
        def __init__(self):
            log_message("ATTENTION", "G√©n√©rateur fallback utilis√©", "init_tutorial")
        
        def generate_tutorial_html(self, version="Unknown", language="fr"):
            log_message("ERREUR", "G√©n√©rateur principal indisponible", "init_tutorial")
            return None
    
    return FallbackGenerator

# =============================================================================
# FONCTIONS PRINCIPALES (CONSERV√âES)
# =============================================================================

def show_first_launch_popup(parent=None, app_controller=None):
    # Affiche un popup de premier lancement avec choix d'action
    try:
        log_message("DEBUG", "Affichage popup premier lancement", "init_tutorial")
        
        theme = theme_manager.get_theme()

        message_styled = [
            ("üéÆ Bienvenue sur ", "normal"), ("RenExtract", "bold_green"), (" !\n\n", "normal"),
            ("Voici un r√©sum√© rapide pour bien d√©marrer :\n\n", "normal"),

            ("üîß DEUX OUTILS COMPL√âMENTAIRES :\n", "bold"),
            ("‚Ä¢ ", "blue"), ("Interface Principale :", "bold"), (" pour traiter les fichiers un par un.\n", "normal"),
            ("‚Ä¢ ", "blue"), ("G√©n√©rateur Ren'Py :", "bold"), (" pour g√©rer l'infrastructure compl√®te du projet.\n\n", "normal"),

            ("üìã WORKFLOW SIMPLIFI√â :\n", "bold"),
            ("1. ", "bold"), ("G√©n√©rateur :", "green"), (" Extrayez les archives (.rpa) et g√©n√©rez l'arborescence.\n", "normal"),
            ("2. ", "bold"), ("Interface Principale :", "green"), (" Traitez chaque fichier (", "normal"), ("Extraire ‚Üí Traduire ‚Üí Reconstruire", "italic"), (").\n", "normal"),
            ("3. ", "bold"), ("√âditeur Temps R√©el :", "green"), (" Affinez vos traductions en jouant (", "normal"), ("optionnel", "italic"), (").\n\n", "normal"),

            ("üí° PREMIERS PAS :\n", "bold"),
            ("‚Ä¢ ", "yellow"), ("Configurez l'application via les Param√®tres", "bold"), (" pour un confort optimal.\n", "normal"),
            ("‚Ä¢ ", "yellow"), ("Familiarisez-vous", "bold"), (" en traitant un jeu simple (type \"kinetic novel\" court).\n", "normal"),
            ("‚Ä¢ ", "yellow"), ("RenExtract g√®re automatiquement", "bold"), (" les sauvegardes et la validation.\n", "normal"),
            ("‚Ä¢ ", "yellow"), ("Apr√®s chaque traitement, v√©rifiez toujours", "bold"), (" les avertissements et rapports g√©n√©r√©s.\n\n", "normal"),

            ("Pour aller plus loin, que souhaitez-vous faire maintenant ?", "blue")
        ]

        result = show_custom_messagebox(
            'askyesnocancel',
            'üéÆ Bienvenue sur RenExtract',
            message_styled,
            theme,
            yes_text='üìñ Ouvrir le Guide Complet',
            no_text='‚öôÔ∏è Configurer les Param√®tres',
            cancel_text='üöÄ Commencer directement',
            parent=parent,
            yes_width=25,
            no_width=25,
            cancel_width=25
        )

        mark_tutorial_shown()

        if result is True:
            show_tutorial(parent)
        elif result is False:
            if app_controller:
                from ui.dialogs.settings_interface import show_unified_settings
                show_unified_settings(parent, app_controller)
            else:
                log_message("ATTENTION", "AppController non fourni pour les param√®tres", "init_tutorial")

    except Exception as e:
        log_message("ERREUR", f"Erreur popup premier d√©marrage : {e}", "init_tutorial")

def check_first_launch():
    # V√©rifie si c'est le premier lancement
    try:
        tutorial_flag_file = FILE_NAMES["tutorial_flag"]
        is_first = not os.path.exists(tutorial_flag_file)
        
        return is_first
    except Exception as e:
        log_message("ERREUR", f"Erreur v√©rification premier lancement: {e}", "init_tutorial")
        return True  # Par d√©faut, consid√©rer comme premier lancement

def mark_tutorial_shown():
    # Marque que le tutoriel a √©t√© affich√©
    try:
        ensure_folders_exist()
        tutorial_flag_file = FILE_NAMES["tutorial_flag"]

        with open(tutorial_flag_file, "w", encoding="utf-8") as f:
            f.write(f"Tutorial shown on: {datetime.datetime.now().isoformat()}\n")
            f.write(f"Version: {VERSION}\n")
            f.write("This file prevents the tutorial from showing again.\n")
            f.write("Delete this file to show the tutorial on next launch.\n")

        log_message("DEBUG", "Tutoriel marqu√© comme affich√©", "init_tutorial")
            
    except Exception as e:
        log_message("ATTENTION", f"Impossible de marquer le tutoriel: {e}", "init_tutorial")

def show_tutorial(parent=None, language='fr'):
    # Fonction principale pour afficher le tutoriel HTML (fran√ßais uniquement)
    try:
        log_message("DEBUG", f"Demande d'affichage tutoriel", "init_tutorial")
        
        # Essayer d'utiliser le g√©n√©rateur import√© automatiquement
        if 'TutorialGenerator' in globals():
            TutorialGenerator = globals()['TutorialGenerator']
            
            if isinstance(TutorialGenerator, type):
                generator = TutorialGenerator()
                html_path = generator.generate_tutorial_html(VERSION)
                
                if html_path and os.path.exists(html_path):
                    try:
                        html_url = f"file:///{html_path.replace(os.sep, '/')}"
                        webbrowser.open(html_url)
                        log_message("INFO", f"Guide complet ouvert dans le navigateur: {html_path}", "init_tutorial")
                        return html_path
                    except Exception as e:
                        log_message("ERREUR", f"Impossible d'ouvrir le navigateur: {e}", "init_tutorial")
                        _show_fallback_message(parent)
                        return html_path
                        
        # Fallback si aucun g√©n√©rateur disponible
        log_message("ERREUR", "G√©n√©rateur non disponible", "init_tutorial")
        _show_fallback_message(parent)
        return None

    except Exception as e:
        log_message("ERREUR", f"Erreur g√©n√©ration tutoriel HTML: {e}", "init_tutorial")
        _show_fallback_message(parent)
        return None

def _show_fallback_message(parent=None):
    # Affiche un message de fallback si la g√©n√©ration HTML √©choue
    try:
        theme = theme_manager.get_theme()
        show_custom_messagebox(
            'error',
            'Erreur Guide',
            "Impossible de g√©n√©rer le guide HTML.\n\n"
            "V√©rifiez les logs dans 04_Configs pour plus de d√©tails.\n\n"
            "En attendant, consultez la documentation en ligne ou "
            "les commentaires dans le code source de l'application.",
            theme,
            parent=parent
        )
    except Exception:
        pass

# Classe legacy maintenue pour compatibilit√©
class UnifiedTutorialInterface:
    def __init__(self, parent_window, app_controller=None):
        log_message("INFO", "Interface Tkinter remplac√©e par HTML", "init_tutorial")
        show_tutorial(parent_window)

# =============================================================================
# M√âTADONN√âES / VALIDATION ARCHITECTURE - CONSERV√âES
# =============================================================================

CONTENT_MODULES = {
    1: 'tab_01',
    2: 'tab_02',
    3: 'tab_03',
    4: 'tab_04',
    5: 'tab_05',
    6: 'tab_06',
    7: 'tab_07',
    8: 'tab_08',
    9: 'tab_09'
}

def get_version_info():
    # Informations de version enrichies avec sant√©
    return {
        'version': '2.0.0',
        'architecture': 'modulaire_fran√ßaise',
        'language': 'fr',
        'total_modules': len(CONTENT_MODULES),
        'health_percentage': TUTORIAL_HEALTH_STATUS.get('health_percentage', 0),
        'debug_mode': TUTORIAL_HEALTH_STATUS.get('health_percentage', 100) < 80,
        'features': [
            'Guide fran√ßais complet',
            'Modules de contenu s√©par√©s',
            'Cache optimis√©',
            "Gestion d'erreurs robuste",
            "Syst√®me de sant√© automatique",
            "Mode debug adaptatif",
            "Auto-scroll lors du changement d'onglet"
        ]
    }

def validate_architecture():
    # Validation architecture avec sant√© automatique
    health_percentage = TUTORIAL_HEALTH_STATUS.get('health_percentage', 0)
    
    return {
        'valid': health_percentage >= 70,
        'health_percentage': health_percentage,
        'errors': TUTORIAL_FAILED_MODULES,
        'warnings': [],
        'debug_mode': health_percentage < 80,
        'details': TUTORIAL_HEALTH_STATUS
    }

def get_health_report():
    # Rapport de sant√© d√©taill√©
    health_data = TUTORIAL_HEALTH_STATUS
    
    if not health_data:
        return "Aucune donn√©e de sant√© disponible"
    
    report = [
        f"RAPPORT DE SANT√â - Package ui.tutorial",
        f"Sant√© globale: {health_data.get('health_percentage', 0)}%",
        f"Modules charg√©s: {health_data.get('loaded_modules', 0)}/{health_data.get('total_modules', 0)}",
        f"Symboles export√©s: {health_data.get('total_symbols', 0)}",
        f"Mode debug: {'ACTIV√â' if health_data.get('health_percentage', 100) < 80 else 'D√âSACTIV√â'}",
        "",
        "MODULES:",
    ]
    
    for module in TUTORIAL_LOADED_MODULES:
        pass
    
    if TUTORIAL_FAILED_MODULES:
        report.append("√âCHECS:")
        for module in TUTORIAL_FAILED_MODULES:
            report.append(f"  ‚ùå {module}: FAILED")
    
    return "\n".join(report)

def force_health_check():
    # Force un nouveau check de sant√©
    global TUTORIAL_HEALTH_STATUS, TUTORIAL_LOADED_MODULES, TUTORIAL_FAILED_MODULES
    loaded_modules, failed_modules, modules_list = load_tutorial_modules()
    health_status = calculate_health_status(loaded_modules, failed_modules, modules_list)
    
    TUTORIAL_HEALTH_STATUS = health_status
    TUTORIAL_LOADED_MODULES = list(loaded_modules.keys())
    TUTORIAL_FAILED_MODULES = failed_modules
    
    return health_status['health_percentage'], health_status

# ===== INITIALISATION DU PACKAGE =====


try:
    # Chargement des modules
    loaded_modules, failed_modules, modules_list = load_tutorial_modules()
    total_modules = len(modules_list)
    
    # Calcul de la sant√©
    health_status = calculate_health_status(loaded_modules, failed_modules, modules_list)
    
    # Gestion du mode debug automatique
    # ‚úÖ D√âSACTIV√â : On laisse l'utilisateur g√©rer le mode debug via les param√®tres
    # manage_debug_mode(health_status)
    
    # Export des symboles
    export_symbols_to_globals(loaded_modules, globals())
    
    # Messages de sant√© (simplifi√©s)
    if LOGGING_AVAILABLE:
        if health_status['health_percentage'] >= 100:
            # Sant√© parfaite : log en DEBUG uniquement
            log_message("DEBUG", f"‚úÖ tutorial: {health_status['loaded_modules']}/{health_status['total_modules']} OK", "init_tutorial")
        elif health_status['health_percentage'] >= 90:
            # Sant√© excellente mais pas 100% : afficher d√©tails
            log_message("INFO", f"üü¢ Package tutorial sant√© excellente: {health_status['health_percentage']:.0f}% ({health_status['loaded_modules']}/{health_status['total_modules']} modules)", "init_tutorial")
            if health_status['failed_modules'] > 0:
                log_message("ERREUR", f"Modules non charg√©s: {', '.join(health_status['failed_module_names'])}", "init_tutorial")
        elif health_status['health_percentage'] >= 70:
            log_message("ATTENTION", f"üü° Package tutorial sant√©: {health_status['health_percentage']:.0f}% ({health_status['loaded_modules']}/{health_status['total_modules']} modules)", "init_tutorial")
            if health_status['failed_modules'] > 0:
                log_message("ERREUR", f"Modules non charg√©s: {', '.join(health_status['failed_module_names'])}", "init_tutorial")
        else:
            log_message("ERREUR", f"üî¥ Package tutorial sant√© critique: {health_status['health_percentage']:.0f}% ({health_status['loaded_modules']}/{health_status['total_modules']} modules)", "init_tutorial")
            if health_status['failed_modules'] > 0:
                log_message("ERREUR", f"Modules non charg√©s: {', '.join(health_status['failed_module_names'])}", "init_tutorial")
    
    # Message final de sant√©
    
    # D√©finir __all__ dynamiquement
    __all__ = [
        # Fonctions principales conserv√©es
        'show_tutorial',
        'show_first_launch_popup', 
        'check_first_launch',
        'mark_tutorial_shown',
        'UnifiedTutorialInterface',
        'get_version_info',
        'validate_architecture',
        'get_health_report',
        'force_health_check',
        'CONTENT_MODULES',
    ]
    
    for symbols in loaded_modules.values():
        __all__.extend(symbols.keys())
    
    # Variables de statut disponibles pour l'ext√©rieur
    TUTORIAL_HEALTH_STATUS = health_status
    TUTORIAL_LOADED_MODULES = list(loaded_modules.keys())
    TUTORIAL_FAILED_MODULES = failed_modules

except Exception as e:
    log_message("ERREUR", f"üí• Erreur critique lors de l'initialisation du package tutorial: {str(e)}", "init_tutorial")
    # D√©finir des valeurs de fallback
    __all__ = [
        'show_tutorial',
        'show_first_launch_popup', 
        'check_first_launch',
        'mark_tutorial_shown',
        'UnifiedTutorialInterface'
    ]
    TUTORIAL_HEALTH_STATUS = {
        'health_percentage': 0,
        'loaded_modules': 0,
        'failed_modules': 1,
        'total_modules': 1,
        'total_symbols': 0,
        'failed_module_names': ['init_error'],
        'can_operate': False,
        'is_healthy': False
    }
    TUTORIAL_LOADED_MODULES = []
    TUTORIAL_FAILED_MODULES = ['critical_init_error']

# Version et m√©tadonn√©es du package (r√©cup√©ration automatique depuis constants)
try:
    from infrastructure.config.constants import VERSION, PROJECT_NAME, AUTHOR, PROJECT_DESCRIPTION
    __version__ = VERSION
    __author__ = AUTHOR
    __project__ = PROJECT_NAME
    __description__ = f"Package tutorial pour {PROJECT_NAME} - Syst√®me de guide HTML fran√ßais avec g√©n√©ration optimis√©e"
except ImportError:
    # Fallbacks si constants indisponible
    __version__ = "2.0.0"
    __author__ = "Rory Mercury91"
    __project__ = "RenExtract"
    __description__ = "Package tutorial pour RenExtract - Syst√®me de guide HTML fran√ßais avec g√©n√©ration optimis√©e"