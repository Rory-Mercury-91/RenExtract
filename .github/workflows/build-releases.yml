# .github/workflows/build-releases.yml
name: Build & Release RenExtract

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write
  actions: read

env:
  RELEASE_NAME: ${{ github.ref_name }}

jobs:
  build-windows:
    name: Build Windows
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller>=5.0
          
          # Installer les dépendances depuis requirements.txt
          if (Test-Path requirements.txt) {
            echo "📦 Installation depuis requirements.txt"
            pip install -r requirements.txt
          } else {
            echo "⚠️  requirements.txt non trouvé, installation manuelle"
            pip install tkinterdnd2>=0.3.0
            pip install requests>=2.0
            pip install groq>=0.4.1
            pip install typing-extensions>=4.0.0
            # Note : Pillow supprimé - utilise maintenant l'installation temporaire des polices
          }
        shell: pwsh

      - name: Update version metadata (anti-detection)
        run: |
          echo "📝 Mise à jour des métadonnées anti-détection..."
          
          # Générer une version lisible
          $version = "${{ env.RELEASE_NAME }}"
          if (-not $version.StartsWith("v")) {
            $version = "dev-$(Get-Date -Format 'yyyyMMdd')"
          }
          
          # Mettre à jour version_info.txt avec le script
          if (Test-Path "Z_Ne_Pas_supprimer/update_version_info.py") {
            python "Z_Ne_Pas_supprimer/update_version_info.py" "RenExtract $version"
            echo "✅ Métadonnées version_info.txt mises à jour"
          } else {
            echo "⚠️  Script update_version_info.py non trouvé, version_info.txt utilisé tel quel"
          }
        shell: pwsh

      - name: Build Windows Executable
        run: |
          echo "🔨 Construction de RenExtract pour Windows..."
          
          # Créer les dossiers artifacts
          mkdir artifacts
          mkdir artifacts/windows
          
          # Créer le dossier 04_Configs s'il n'existe pas (ignoré par Git)
          if (-not (Test-Path "04_Configs")) {
            mkdir "04_Configs"
            echo "📁 Dossier 04_Configs créé"
          }
          
          # Vérifier la présence de l'icône
          if (Test-Path icone.ico) {
            echo "🎨 Icône détectée"
            $iconArg = "--icon=icone.ico"
          } else {
            echo "⚠️  Icône non trouvée, compilation sans icône"
            $iconArg = ""
          }
          
          # Vérifier la présence de version_info.txt
          if (Test-Path version_info.txt) {
            echo "📋 version_info.txt détecté (avec métadonnées anti-détection)"
            $versionInfoArg = "--version-file=version_info.txt"
          } else {
            echo "⚠️  version_info.txt non trouvé"
            $versionInfoArg = ""
          }
          
          # Créer l'exécutable avec PyInstaller
          # Options anti-détection :
          # --noupx : Désactive compression UPX (réduit faux positifs antivirus)
          # --log-level=WARN : Logs propres
          # Imports cachés explicites pour éviter comportements suspects
          pyinstaller --onefile --windowed `
            --name "RenExtract" `
            --noupx `
            --log-level=WARN `
            $iconArg `
            $versionInfoArg `
            --add-data "core;core" `
            --add-data "infrastructure;infrastructure" `
            --add-data "ui;ui" `
            --add-data "04_Configs;04_Configs" `
            --hidden-import=groq `
            --hidden-import=typing_extensions `
            --hidden-import=tkinter `
            --hidden-import=tkinterdnd2 `
            --hidden-import=requests `
            main.py
          
          # Copier l'exécutable
          copy "dist/RenExtract.exe" "artifacts/windows/"
          
          # Créer l'archive avec un nom descriptif
          $version = "${{ env.RELEASE_NAME }}"
          if (-not $version.StartsWith("v")) {
            $version = "dev-$(Get-Date -Format 'yyyyMMdd')"
          }
          Compress-Archive -Path "artifacts/windows/RenExtract.exe" -DestinationPath "artifacts/windows/RenExtract-$version-Windows.zip"
          
          echo "✅ Build Windows terminé: RenExtract-$version-Windows.zip"
        shell: pwsh

      - name: Generate VirusTotal info
        shell: pwsh
        run: |
          echo "🔐 Génération des hash pour VirusTotal..."
          
          $exePath = "artifacts/windows/RenExtract.exe"
          $sha256 = (Get-FileHash -Path $exePath -Algorithm SHA256).Hash
          $md5 = (Get-FileHash -Path $exePath -Algorithm MD5).Hash
          
          # Créer le contenu du fichier
          $content = "# VirusTotal Analysis`n`n"
          $content += "Pour vérifier la sécurité de cet exécutable:`n`n"
          $content += "1. Visitez: https://www.virustotal.com/`n"
          $content += "2. Uploadez le fichier ou utilisez les hash ci-dessous`n`n"
          $content += "**SHA256:** $sha256`n"
          $content += "**MD5:** $md5`n`n"
          $content += "**Note:** 2-3 détections heuristiques sont normales (faux positifs).`n"
          $content += "Le code source est 100% open source et vérifiable sur GitHub.`n`n"
          $content += "**Améliorations anti-détection appliquées:**`n"
          $content += "- Métadonnées complètes (auteur, copyright, licence)`n"
          $content += "- Manifest Windows (pas de droits admin requis)`n"
          $content += "- Options PyInstaller optimisées (--noupx, imports explicites)`n"
          $content += "- Lien GitHub visible dans les propriétés de l'exe`n"
          
          $content | Out-File -FilePath "artifacts/windows/virustotal_info.txt" -Encoding UTF8
          echo "✅ Fichier virustotal_info.txt créé"

      - name: Upload Windows Artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-${{ env.RELEASE_NAME }}
          path: |
            artifacts/windows/*.zip
            artifacts/windows/virustotal_info.txt
          retention-days: 30

  build-linux:
    name: Build Linux
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-tk python3-dev

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller>=5.0
          
          # Installer les dépendances depuis requirements.txt
          if [ -f requirements.txt ]; then
            echo "📦 Installation depuis requirements.txt"
            pip install -r requirements.txt
          else
            echo "⚠️  requirements.txt non trouvé, installation manuelle"
            pip install tkinterdnd2>=0.3.0
            pip install requests>=2.0
            pip install groq>=0.4.1
            pip install typing-extensions>=4.0.0
            # Note : Pillow supprimé - utilise maintenant l'installation temporaire des polices
          fi

      - name: Build Linux Binary
        run: |
          echo "🔨 Construction de RenExtract pour Linux..."
          mkdir -p artifacts/linux
          
          # Créer le dossier 04_Configs s'il n'existe pas (ignoré par Git)
          if [ ! -d "04_Configs" ]; then
            mkdir -p "04_Configs"
            echo "📁 Dossier 04_Configs créé"
          fi
          
          # Créer l'exécutable Linux
          # --noupx : Désactive compression UPX (cohérence avec Windows)
          pyinstaller --onefile \
            --name "RenExtract" \
            --noupx \
            --add-data "core:core" \
            --add-data "infrastructure:infrastructure" \
            --add-data "ui:ui" \
            --add-data "04_Configs:04_Configs" \
            --hidden-import=groq \
            --hidden-import=typing_extensions \
            main.py
          
          # Copier l'exécutable
          cp dist/RenExtract artifacts/linux/
          
          # Rendre exécutable
          chmod +x artifacts/linux/RenExtract
          
          # Créer l'archive tar.gz
          VERSION="${{ env.RELEASE_NAME }}"
          if [[ ! "$VERSION" =~ ^v ]]; then
            VERSION="dev-$(date +%Y%m%d)"
          fi
          tar -czf artifacts/linux/RenExtract-${VERSION}-Linux.tar.gz -C artifacts/linux RenExtract
          
          echo "✅ Build Linux terminé: RenExtract-${VERSION}-Linux.tar.gz"

      - name: Upload Linux Artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-${{ env.RELEASE_NAME }}
          path: artifacts/linux/*.tar.gz
          retention-days: 30

  create-release:
    name: Create GitHub Release
    needs: [build-windows, build-linux]
    runs-on: ubuntu-latest
    # Ne créer une release que pour les tags
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v4

      - name: Download Windows Artifact
        uses: actions/download-artifact@v4
        with:
          name: windows-${{ env.RELEASE_NAME }}
          path: release/windows

      - name: Download Linux Artifact
        uses: actions/download-artifact@v4
        with:
          name: linux-${{ env.RELEASE_NAME }}
          path: release/linux

      - name: Generate Release Notes
        id: release_notes
        run: |
          VERSION="${{ github.ref_name }}"
          
          cat > release_notes.md << 'EOFNOTES'
          ## 🎮 RenExtract ${{ github.ref_name }}
          
          **Outil professionnel d'extraction, préparation et reconstruction de traductions pour Ren'Py**
          
          ---
          
          ### ⬇️ Téléchargement Direct
          
          [![Download Windows](https://img.shields.io/badge/Windows-0078D4?style=for-the-badge&logo=windows&logoColor=white)](https://github.com/Rory-Mercury-91/RenExtract/releases/download/${{ github.ref_name }}/RenExtract-${{ github.ref_name }}-Windows.zip)
          [![Download Linux](https://img.shields.io/badge/Linux-FCC624?style=for-the-badge&logo=linux&logoColor=black)](https://github.com/Rory-Mercury-91/RenExtract/releases/download/${{ github.ref_name }}/RenExtract-${{ github.ref_name }}-Linux.tar.gz)
          
          | Plateforme | Taille | Téléchargement |
          |------------|--------|----------------|
          | 🪟 **Windows** | ~16 MB | [RenExtract-${{ github.ref_name }}-Windows.zip](https://github.com/Rory-Mercury-91/RenExtract/releases/download/${{ github.ref_name }}/RenExtract-${{ github.ref_name }}-Windows.zip) |
          | 🐧 **Linux** | ~18 MB | [RenExtract-${{ github.ref_name }}-Linux.tar.gz](https://github.com/Rory-Mercury-91/RenExtract/releases/download/${{ github.ref_name }}/RenExtract-${{ github.ref_name }}-Linux.tar.gz) |
          
          ---
          
          ### 📥 Détails des Téléchargements
          
          | Plateforme | Fichier | Instructions |
          |------------|---------|--------------|
          | 🪟 **Windows** | `RenExtract-${{ github.ref_name }}-Windows.zip` | Extraire et exécuter `RenExtract.exe` |
          | 🐧 **Linux** | `RenExtract-${{ github.ref_name }}-Linux.tar.gz` | Extraire, `chmod +x RenExtract`, puis `./RenExtract` |
          
          ### 🚀 Installation
          
          **Windows** : Extraire `.zip` → Double-cliquer `RenExtract.exe`  
          **Linux** : `tar -xzf`, `chmod +x RenExtract`, `./RenExtract`
          
          ### ✨ Fonctionnalités Principales
          
          - 📄 **Extraction & Génération** : Extraction intelligente + génération Ren'Py (pas besoin du SDK !)
          - 🤖 **Traduction IA Groq** : Intégration Groq AI avec personnages, contexte et profils personnalisables
          - 🌍 **Screen Preferences** : Générateur automatique (police, textbox, langue)
          - 🔧 **Outils Avancés** : Nettoyage intelligent, cohérence, sauvegardes hiérarchiques
          - 🎨 **Interface Moderne** : Thèmes, tutoriel intégré, Drag & Drop, édition temps réel
          - 🏗️ **Architecture MVP** : 114 fichiers Python, 24 packages surveillés, 100% production-ready
          
          ### 💡 Utilisation Rapide
          
          > **Important** : RenExtract ne traduit pas automatiquement ! Il prépare vos fichiers, vous traduisez avec vos outils préférés (DeepL, ChatGPT, etc.), puis RenExtract reconstruit les fichiers Ren'Py.
          
          **Workflow** : Charger projet → Générer structure TL → Extraire dialogues → Traduire fichiers `.txt` → Reconstruire → Vérifier cohérence → Tester in-game
          
          ### 📚 Documentation & Support
          
          - 📖 **README** : https://github.com/Rory-Mercury-91/RenExtract
          - 🎓 **Tutoriel intégré** : Appuyez sur `F1` ou cliquez sur "❓ Guide Complet"
          - 💬 **Support Discord** : https://discord.gg/Yp2Hm8JWQ2 (réponse rapide !)
          
          ### 🔧 Configuration
          
          **Requis** : Windows 10/11 (64-bit) ou Linux (GTK3+), 4 GB RAM, ~100 MB disque  
          **Conseil** : Vérifiez toujours la cohérence après reconstruction des fichiers traduits
          
          ---
          
          ### 🆕 Nouveautés ${{ github.ref_name }}
          
          #### 🎯 Édition Cohérence en Ligne
          - ✅ **Modification directe depuis rapport HTML** : Édition des traductions détectées avec pré-remplissage intelligent
          - ✅ **Surlignage visuel** : Mise en évidence des éléments problématiques dans ANCIEN et NOUVEAU
          - ✅ **Boutons copie** : Copie rapide du texte ANCIEN ou NOUVEAU
          - ✅ **Boutons toggle d'exclusion** : "❌ Ignorer / ✅ Inclure" intégrés dans colonne actions
          - ✅ **Traduction assistée** : Intégration Groq AI, DeepL, Google, Microsoft, Yandex
          - ✅ **Validation syntaxique Ren'Py** : Vérification automatique guillemets, crochets, accolades, parenthèses
          - ✅ **Backup automatique** : Type `COHERENCE_EDIT` avec sauvegarde avant modification
          
          #### 🔧 Configuration des Éditeurs
          - ✅ **Détection automatique Windows 10/11** : Lecture registre UserChoice pour respecter le choix utilisateur réel
          - ✅ **Extraction dynamique des chemins** : Récupération chemin d'installation depuis registre (VSCode, Notepad++, Sublime)
          - ✅ **Test de l'éditeur** : Bouton 🧪 créant fichier test dans `04_Configs` et ouvrant à ligne 7 pour validation
          - ✅ **Persistance éditeur personnalisé** : Synchronisation champ de saisie + combobox
          
          #### 🛡️ Contrôles de Cohérence
          - ✅ **Contrôle de longueur unifié** : Un seul contrôle avec seuil 250% et minimum 10 caractères
          - ✅ **Guillemets intelligents** : Ignore apostrophes françaises (c'est, l'eau), compte uniquement quotes réelles
          - ✅ **Terminologie française** : ANCIEN/NOUVEAU au lieu de OLD/NEW (évite confusion mots-clés Ren'Py)
          - ✅ **Interface optimisée** : Grille 4×3 (3 lignes de 4 contrôles) au lieu de 5-5-2
          - ✅ **12 types de vérifications** : Tous configurables et activables/désactivables
          
          #### 🔑 Test et Validation API
          - ✅ **Test clé API Groq** : Bouton 🔍 dans onglet Application pour tester connexion
          - ✅ **Notifications toast** : Utilisation `notification_manager` pour résultats (succès/erreur)
          - ✅ **Thread séparé** : Test non-bloquant avec désactivation temporaire du bouton
          
          #### 📦 Optimisation Exécutable
          - ✅ **Suppression Pillow** : Réduction de 25 MB à ~16 MB (Windows) / ~18 MB (Linux)
          - ✅ **Installation temporaire polices** : Aperçu polices personnalisées sans dépendance lourde
          - ✅ **Gestion intelligente polices** : Conservation polices utilisées, nettoyage temporaires
          
          ---
          
          > 💡 **Conseil** : Restez concis, le README contient déjà les détails techniques
          
          Consultez le [CHANGELOG](https://github.com/Rory-Mercury-91/RenExtract/blob/main/CHANGELOG.md) pour tous les détails.
          
          ---
          
          💖 **Merci d'utiliser RenExtract !**
          
          💬 **Support** : [Discord](https://discord.gg/Yp2Hm8JWQ2) (réponse rapide !)  
          🐛 **Bugs** : [GitHub Issues](https://github.com/Rory-Mercury-91/RenExtract/issues)  
          ⭐ **Aimer** : N'oubliez pas de mettre une étoile sur GitHub !  
          🤝 **Contribuer** : Les pull requests sont les bienvenues !
          EOFNOTES

      - name: Publish GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: RenExtract ${{ github.ref_name }}
          files: |
            release/windows/*.zip
            release/windows/virustotal_info.txt
            release/linux/*.tar.gz
          body_path: release_notes.md
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          # Utiliser PAT_TOKEN pour permettre de déclencher le workflow Discord automatiquement
          # Si PAT_TOKEN n'est pas défini, utilise GITHUB_TOKEN par défaut
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
